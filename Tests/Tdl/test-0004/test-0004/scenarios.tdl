using Autotest.Products.App4_Dev.Suites.Common.GatedChain1.GatedTestsChain1;

scenario SbSTestScenario1 = // W: Unused scenario.
    from (Deployment , Platform) in [(Deploy_Gated, w10rs4-x64), (Deploy_Middle, w10rs4-x86), (Deploy_Finish, win_10_rs3)]
    from Method in [Gated1_S01_Installation, Gated1_S02_CheckFilesAndRegistry, Gated1_S03_CheckDrivers]
    select
    {
        deployment Deployment;
        environments (Platform, App4);
        method Method;
        UniqueId = "BDA24CAF-BF05-49EC-9884-129A48C42FFF";
        Timeout = "02:30:00";
        ProductGroupName = "SbSProductGroup-1";
    };

platform gated_platforms = w10rs3-x64, win7-x64, win2012r2;
platform gated_workstation_platforms = w10rs3-x64, win7-x64, win2012r2;

barrier Barrier1 timeout "00:10:00";
barrier Barrier2 timeout "00:20:00";

scenario GatedChain1
{
    deployment Deploy_Gated;
    environments (gated_platforms, App4);
    config @"um/interprecz/interprecz_smoke.json";
    Area = "GatedTestsChain1";
    UniqueId = "BDA24CAF-BF05-49EC-9884-129A48C42F8C";
    TfsId = 0;
    RevertAgentAfter = true;
    RevertAgentBefore = true;
    Timeout = "00:00:10";
}

scenario GatedChain2
{
    deployment Deploy_Gated;
    environments (gated_platforms, App4);
    sequence
    {
      method Autotest.Products.App4_Dev.Suites.Common.GatedChain1.GatedTestsChain1.Gated1_S01_Installation;
      method Autotest.Products.App4_Dev.Suites.Common.GatedChain1.GatedTestsChain1.Gated1_S02_CheckFilesAndRegistry;
      method Autotest.Products.App4_Dev.Suites.Common.GatedChain1.GatedTestsChain1.Gated1_S03_CheckDrivers;
    }
    Area = @"GatedTestsChain2";
    UniqueId = @"BDA24CAF-BF05-49EC-9884-129A48C42F8D";
    TfsId = 0;
    RevertAgentAfter = true;
    Timeout = "00:00:10";
}

scenario GatedChain3 // W: Unused scenario.
{
    deployment Deploy_Gated;
    environments (gated_platforms, App4);
    sequence
    {
      method Autotest.Products.App4_Dev.Suites.Common.GatedChain1.GatedTestsChain1.Gated1_S01_Installation;
      method Autotest.Products.App4_Dev.Suites.Common.GatedChain1.GatedTestsChain1.Gated1_S02_CheckFilesAndRegistry;
      method Autotest.Products.App4_Dev.Suites.Common.GatedChain1.GatedTestsChain1.Gated1_S03_CheckDrivers;
    }
    Area = @"GatedTestsChain2";
    UniqueId = @"BDA24CAF-BF05-49EC-9884-129A48C42F8F";
    TfsId = 0;
    RevertAgentAfter = true;
    Timeout = "00:00:10";
}

parallel scenario GateTests_App4 = GatedChain1, GatedChain2;

scenario GateTests_App42 = GatedChain3;

scenario GateTests = GateTests_App4, GateTests_App42;

suite Gate_2
{
    platform gated_platforms;
    product App4;
    ProductDistributivePath = ProductDistributivePath;
    ProductModulesPath = ProductModulesPath;
    AutotestsPath = AutotestsPath;
    BaseDistribTestModules = BaseDistribTestModules;
    GateTests();
}
