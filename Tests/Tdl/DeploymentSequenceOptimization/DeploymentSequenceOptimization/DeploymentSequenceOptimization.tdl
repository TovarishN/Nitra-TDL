external { string Foo; }

deployment D1(string Message = Foo)
{
  KL.Autotests.Commands.LogMessage(Message);
  expected 0;
}

deployment D2(bool IsVerbose = false)
{
  KL.Autotests.Commands.ComplexOperation(IsVerbose);
  expected 0;
}

deployment D3()
  script "file.ps1"
{}

deployment S1 = D1, D2;

deployment S2 = D1, D2, D3;

deployment S3 = D3, D1, D2;

deployment S4 = D1, D3, D2;

select deployment SS1(F)
{
  | "X" => D1, D2
}

select deployment SS2(F)
{
  | "X" => D1, D2, D3
}

select deployment SS3(F)
{
  | "X" => D3, D1, D2
}

select deployment SS4(F)
{
  | "X" => D1, D3, D2
}

deployment K1(string Message = "a")
{
  KL.Autotests.Commands.LogMessage(Message);
}

deployment K2(string Message = "b")
{
  KL.Autotests.Commands.LogMessage(Message);
}

deployment K3(string Message = "a")
{
  KL.Autotests.Commands.LogMessage(Message);
}

deployment K4(string Message = "a")
{
  KL.Autotests.Commands.LogMessage(Message);
}

deployment KK = K1, K2, K3, K4;

platform win7-x86;

product type ProductType
{
  string Name;
  string Version;
  string BranchName;
}

product Product : ProductType
{
  Name = "Product";
  Version = "1.0.0.0";
  BranchName = "master";
}

scenario Scenario = 
  from d in [S1, S2, S3, S4, SS1, SS2, SS3, SS4, KK]
  select
  {
    deployment d;
    environments (win7-x86, Product);
    method Autotest.Products.App4_Dev.Suites.Common.GatedChain1.GatedTestsChain1.Gated1_S03_CheckDrivers;
    UniqueId = "B80FD6D3-14FC-4BF0-B8EC-E7AB492F8287";
    Timeout = "00:30";
  };
