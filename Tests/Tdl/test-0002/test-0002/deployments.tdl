deployment "Update Firefox => Install product => Disable UAC => Reboot" = "UpdateFirefox", "Install product with reboot-3832 Impl", "Disable UAC";

deployment "Update Firefox => Install product => Reboot" = "UpdateFirefox", "Install product with reboot-3832 Impl", "RebootAgent";

deployment "Update Firefox => Install product" = "UpdateFirefox", "Install product";

deployment "Update Firefox => Install product NoAV" = "UpdateFirefox", "Install product NoAV";

deployment "Update Chrome => Install product" = "UpdateChrome", "Install product";

deployment "Update Chrome => Install product NoAV" = "UpdateChrome", "Install product NoAV";

deployment "Update Chrome => Install product => Reboot" = "UpdateChrome", "Install product with reboot-3832 Impl", "RebootAgent";

deployment "Update Chrome => Install product => Disable UAC => Reboot" = "UpdateChrome", "Install product with reboot-3832 Impl", "Disable UAC";

deployment "Install product with activation code with fw" = "Turn firewall on", "Install product";

deployment "Install product with activation code with reboot" = "Install product with activation code with reboot Impl", "RebootAgent";

deployment "Install product with disabled UAC" = "Disable UAC", "Install product";

deployment "Install product with reboot-3832" = "Install product with reboot-3832 Impl", "RebootAgent";

deployment "Install product NoDV Chrome" = "Install product NoDV Chrome NeedReboot", "RebootAgent";

deployment "Install product-51177" = "Set environment values-51176 Impl", "Install product without backdoor";

deployment "Install product-51186" = "Set environment values-51185 Impl", "Install product without backdoor";

deployment "Install product-6602" = "Disable UAC", "Install product [Enabled downgrade]";

deployment "[Ucp.Beta.Mats.App2_] Install product" = "[Ucp.Beta.Mats.App2_] Set environment values", "Install product without backdoor";

deployment "Install product with activation code eicar" = "Copy EicarCreator tool", "Install product";

deployment "[App2.TFU] Copy new version distributive" = "Install product for TFU", "Copy New Product Version";

deployment "Install product wo AppVerifier NoUAC" = "Disable UAC", "Install product NoAV";

deployment "[App8.Main.Unsigned.Outlook] Install product" = "Disable UAC", "[App8.Main.Unsigned.Outlook] Install ISO Impl", "Install Outlook", "Install product";

deployment "[App8.Main.Hips] App8 activated with kpc after comodo" = "Disable UAC", "Copy Comodo and set autorun", "RebootAgent", "Install product";

deployment "[Main.UpgradeSettingsByReinstall] CopyNewProductDistributive" = "[Main.UpgradeSettingsByReinstall] Install product", "Copy New Product Version";

deployment "[Main.BvtPvt.AntiSpam] Install product wo Outlook" = "Disable UAC", "Install product NoAV";

deployment "[App2.TFU] Prepare environment and reboot" = "Install product for TFU", "Copy New Product Version", "[App2.TFU] Run TFU update Impl", "[App2.TFU] Prepare environment and reboot Impl";

deployment "[App2.TFU] Run TFU update" = "Install product for TFU", "Copy New Product Version", "[App2.TFU] Run TFU update Impl";

deployment "[App2.Main.Installation] Install with fw" = "Turn firewall on", "Install product";

deployment "[App10FS.Main.WithComodo] Install product aftere comodo" = "[App10FS.Main.WithComodo] Enable autoplay", "Disable UAC", "Copy Comodo and set autorun", "RebootAgent", "Install product";

deployment "Install product after comodo" = "Disable UAC", "Copy Comodo and set autorun", "RebootAgent", "Install product";

deployment "Install product GDPR backdoor no UAC" = "Install product GDPR backdoor", "Disable UAC";

deployment "Install product (With full Traces)" = "[Ucp.Beta.Mats.App2_] Set environment values", "Install product (With full Traces) Impl";

deployment "Install product with EicarCreator" = "Copy EicarCreator tool", "Install product";

deployment "Install Outlook => Install product" = "Disable UAC", "[Main.BvtPvt.MailAv] Mount ISO Impl", "Install Outlook", "Install product";

deployment "Install App9 modules after Main Product" = "Set PROD environment", "Install two products", "Install App9 modules after Main Product Impl";

deployment "Install App9 modules after App2 no EULA acceptance-11102" = "Set PROD environment", "Intstall App2_+App9 no EULA acceptance-11101 Impl", "Install App9 modules after App2 no EULA acceptance-11102 Impl";

deployment "Install App9 Prod" = "Set PROD environment", "Install App9";

deployment "[Ucp.Prod.Mats.App2_] Install product" = "Set environment values-49140 Impl", "Install product without backdoor";

deployment "Disable UAC-526" = "[App2.Main] Install product with new Firefox", "Disable UAC";

deployment "Disable UAC-1649" = "Install product with reboot-3832 Impl", "Disable UAC";

deployment "Disable UAC-10998" = "[Ucp.Beta.Mats.App2_] Set environment values", "Install product without backdoor", "Disable UAC";

deployment "Install product after langpack" = "Install Windows Language Pack", "Install product";

deployment "Install product and reboot" = "Install product", "RebootAgent";

deployment "Install product no uac-1124" = "Disable UAC", "Install product NoBackdoor TraceLevel_1000";

deployment "Install product backdoor no UAC" = "Install product", "Disable UAC";

deployment "Install product no uac-11020" = "Disable UAC", "Install product without backdoor";

deployment "Install product w PROD environment no backdoor" = "Set PROD environment", "Install product No Backdoor";


// Upgrades 

deployment "[App11InstallProduct] Install product w Outlook" = "Disable UAC", "Install Outlook [old]", "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "Install product", "RebootAgent";

deployment "[App11InstallProduct] Install product w BETA environment" = "[App1_InstallProduct] Set BETA environment values-11971 Impl", "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "Install product", "RebootAgent";

deployment "[App8.Main.UpgradeSettingsFromOldVersion] CopyNewProductDistributive" = "[App8.Main.UpgradeSettingsFromOldVersion] Install previous product version", "[Main.TFU] Copy old autotest facade", "Copy New Product Version";

deployment "Install product w BETA environment" = "[App1_InstallProduct] Set BETA environment values-11971 Impl", "Install 2017 with fw Impl", "_Install product";

deployment "Install product w Disable UAC" = "Disable UAC", "Install 2017 with fw Impl", "_Install product";

deployment "Install product w EicarCreator" = "Copy EicarCreator tool", "Install 2017 with fw Impl", "_Install product";

deployment "[App11InstallProduct] Install product with RunAtSystemStartup" = "[App11InstallProduct] Install 2017 with RunAtSystemStartup", "_Install product RunAtStartup", "RebootAgent";

deployment "[App11InstallProduct] Install product w fw" = "Turn firewall on", "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "_Install product", "RebootAgent";

deployment "[App11InstallProduct] Install product no backdoor" = "[App11InstallProduct] Install 2017 no backdoor", "Install product without backdoor", "RebootAgent";

deployment "[App11InstallProduct] Install product" = "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "_Install product", "RebootAgent";

deployment "Update Firefox => [App11InstallProduct] Install product" = "UpdateFirefox", "[App11InstallProduct] Install product";

deployment "Update Chrome => [App11InstallProduct] Install product" = "UpdateChrome", "[App11InstallProduct] Install product";

deployment "[App1_InstallProduct] Install product w Prod Environment-11991" = "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "Set PROD environment", "Install product";

deployment "[App1_InstallProduct] Install product w Beta Environment-11990" = "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "[App1_InstallProduct] Set BETA environment values-11971 Impl", "Install product";

deployment "[App1_InstallProduct] Install product no backdoor" = "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "_Install product without backdoor", "RebootAgent";

deployment "[App1_InstallProduct] Install product No Dump On Assert" = "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "_Install product No Dump On assert";

deployment "Update Firefox => Upgrade product in deployment" = "UpdateFirefox", "Upgrade product in deployment";

deployment "Update Chrome => Upgrade product in deployment" = "UpdateChrome", "Upgrade product in deployment";

deployment "Upgrade product in deployment" = "Install 2017 with fw Impl", "_Install product", "RebootAgent";

deployment "[App82019.MP0.TFU] Copy new version distributive" = "[App82019.MP0.TFU] Install previous product version", "Copy New Product Version";

deployment "[App8InstallProduct] install product with StartAtSystemStartup" = "Install 2017 with fw RunAtStartup Impl", "[App2.Main.Installation] Install product";

deployment "[App11InstallProduct] antirootkit" = "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "_Install product", "RebootAgent";

deployment "Install product with service autostart" = "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "_Install product RunAtStartup";

deployment "[Ucp.Beta.Mats.App2_] Copy product distributive" = "[Ucp.Beta.Mats.App2_] Set environment values", "Copy previous product no backdoor";

deployment "[App2.Main.Installation] Copy new version distributive" = "[App2.Main.Installation] Install previous product version", "Copy new version distributive";

deployment "[App8.Main.TfuSmoke] Run TFU update" = "Install Base product with lic mock", "Copy New Product Version", "[App2.TFU] Run TFU update Impl";

deployment "[App8.Main.TfuSmoke] Prepare environment and reboot" = "Install Base product with lic mock", "Copy New Product Version", "[App2.TFU] Run TFU update Impl", "[App2.TFU] Prepare environment and reboot Impl";

deployment "[App8.Main.TFU] Copy new version distributive" = "[App8.Main.TFU] Install previous product version", "Copy New Product Version";

deployment "[App6InstallProduct] install product w Outlook" = "Disable UAC", "Install Outlook [old]", "Install 2017 with fw Impl", "_Install product";

deployment "[App6InstallProduct] install product w App9" = "Install 2017 with fw Impl", "_Install product with App9";

deployment "[App6InstallProduct] Install product with No Backdoor" = "Install 2017 with fw Impl", "_Install product without backdoor";

deployment "[App6InstallProduct] Install product with Backdoor No App Ver" = "Install 2017 with fw Impl", "_Install product NoAV";

deployment "[Main.UpgradeSettings] No install" = "[Main.UpgradeSettings] Install previous product version with enabled protection", "No install", "RebootAgent";

deployment "[Main.Upgrade.Builds2] Copy new product distributive" = "[Main.Upgrade.Builds2] Install previous product version", "[Main.TFU] Copy old autotest facade", "Copy New Product Version", "RebootAgent";

deployment "[Main.TFU.Custom] Copy new product distributive with test modules" = "[Main.TFU.Builds2] Install previous product version" , "[Main.TFU] Copy old autotest facade", "Copy New Product Version", "RebootAgent";

deployment "[App8.Main.UpgradeSettings.deployprofile] No install" = "Install previous product version-49114 Impl", "No install";

deployment "[Main.BvtPvt.SaveRegistry] Install product" = "[App2_2019.MR0] Install 2019 with fw Impl", "[Main.BvtPvt.SaveRegistry] SaveEnviroment Impl", "_Install product";

deployment "[App2_2019.MP0.TFU] Copy new version distributive" = "Install previous product version", "Copy New Product Version";

deployment "[App2_2019.MR0.Comodo] Install product after comodo" = "Disable UAC", "Copy Comodo", "RebootAgent", "[App2_2019.MR0] Install 2019 with fw Impl", "_Install product", "RebootAgent";

deployment "[App2_2019.MR0] Install product" = "[App2_2019.MR0] Install 2019 with fw Impl", "_Install product";

deployment "[App2_2019.MR0] Install product with RunAtSystemStartup" = "[App2_2019.MR0] Install 2019 with RunAtSystemStartup Impl", "Install product RunAtStartup";

deployment "[App2_2019.MR0] Install product with fw" = "Turn firewall on", "[App2_2019.MR0] Install 2019 with fw Impl", "_Install product";

deployment "[App2_InstallProduct] Install product w Outlook" = "Install Outlook [old]", "Install 2017 with fw Impl", "_Install product";

deployment "[App2_InstallProduct] Install product with App9" = "Install 2017 with fw Impl", "_Intstall App2_+App9 Impl";

deployment "[App9Install] Install product" = "Install base App9 with certs", "[App9Install] Install";

deployment "[App2_2019.MR0] Install product no backdoor" = "[App2_2019.MR0] Install 2019 with fw Impl", "_Install product without backdoor";

deployment "Install product with EicarCreator tool" = "Copy EicarCreator tool", "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "Install product", "RebootAgent";

deployment "Install App9 with upgrade" = "Install App9", "Copy additional files [Main]", "Copy New Product Version", "Set autotest overrides Impl";

deployment "Install product w PROD environment" = "Set PROD environment", "Install 2017 with fw Impl", "_Install product";

deployment "Install upgraded product No Dump on Assert" = "Install 2017 with fw Impl", "_Install product No Dump On assert";

deployment "[Ucp.Prod.Mats.App2_] Copy product distributive" = "Set environment values-49140 Impl", "Copy previous product no backdoor";

deployment "CopyNewProductDistributive-49142" = "Set environment values-49140 Impl", "Install old product Impl", "Copy New Product Version";

deployment "CopyNewProductDistributive-49123" = "Install previous product version-49122 Impl", "Copy New Product Version";

deployment "CopyNewProductDistributive-49115" = "Install previous product version-49114 Impl", "Copy New Product Version";

deployment "CopyNewProductDistributive-48257" = "Tfu Install Base product-48256", "Copy New Product Version";

deployment "CopyDistributivesNoProductInstall" = "Copy old product distributive Impl", "Copy New Product Version";

deployment "Copy new version distributive-50981" = "Install previous product version", "Copy additional files 2018", "Copy New Product Version";

deployment "Copy new version distributive-50795" = "Install previous product version", "Copy additional files 2019", "Copy New Product Version";

deployment "Copy new version distributive-45191" = "Install previous version product", "Copy new version distributive";

deployment "Install product for antirootkit" = "Install 2017 with fw Impl", "_Install product";



// Derived deployments (Install product)

select deployment "Install product without backdoor"(InstallationType)
{
    | "Regular"      => "_Install product without backdoor"
    | "Upgrade 2019" => "Install 2019 -> Install product without backdoor"
    | _              => "_Install product without backdoor"
}
deployment "Install 2019 -> Install product without backdoor" = "Install Base Product 2019", "_Install product without backdoor", "RebootAgent";

deployment "_Install product without backdoor" = "_Install product"(
    InstallLicenceBackdoor: "Off");

select deployment "Install product NoBackdoor TraceLevel_1000"(InstallationType)
{
    | "Regular"      => "_Install product NoBackdoor TraceLevel_1000"
    | "Upgrade 2019" => "Install 2019 -> Install product NoBackdoor TraceLevel_1000"
    | _              => "_Install product NoBackdoor TraceLevel_1000"
}
deployment "Install 2019 -> Install product NoBackdoor TraceLevel_1000" = "Install Base Product 2019", "_Install product NoBackdoor TraceLevel_1000", "RebootAgent";
deployment "_Install product NoBackdoor TraceLevel_1000" = "_Install product"(
    ForceTraceLevel: "1000",
    InstallLicenceBackdoor: "Off");

select deployment "Install product NoAV"(InstallationType)
{
    | "Regular"      => "_Install product NoAV"
    | "Upgrade 2019" => "Install 2019 -> Install product NoAV"
    | _              => "_Install product NoAV"
}
deployment "Install 2019 -> Install product NoAV" = "Install Base Product 2019", "_Install product NoAV", "RebootAgent";
deployment "_Install product NoAV" = "_Install product"(
    ForceDisableAppVerifier: true);

select deployment "Install product NoAV Chrome"(InstallationType)
{
    | "Regular" => "_Install product NoAV Chrome"
    | "Upgrade 2019" => "Install 2019 -> Install product NoAV Chrome"
    | _ => "_Install product NoAV Chrome"
}
deployment "Install 2019 -> Install product NoAV Chrome" = "Install Base Product 2019", "_Install product NoAV Chrome", "RebootAgent";
deployment "_Install product NoAV Chrome" = "_Install product"(
    ForceDisableAppVerifier: true,
    UpdateChromeToVersion: "71.0.3578.802");

select deployment "Install product NoAV NoDV"(InstallationType)
{
    | "Regular"      => "_Install product NoAV NoDV"
    | "Upgrade 2019" => "Install 2019 -> Install product NoAV NoDV"
    | _              => "_Install product NoAV NoDV"
}
deployment "Install 2019 -> Install product NoAV NoDV" = "Install Base Product 2019", "_Install product NoAV NoDV", "RebootAgent";
deployment "_Install product NoAV NoDV" = "_Install product"(
    ForceDisableAppVerifier: true,
    ForceDisableDriverVerifier: true);

select deployment "Install product NoAV NoDV NoPPL"(InstallationType)
{
    | "Regular"      => "_Install product NoAV NoDV NoPPL"
    | "Upgrade 2019" => "Install 2019 -> Install product NoAV NoDV NoPPL"
    | _              => "_Install product NoAV NoDV NoPPL"
}
deployment "Install 2019 -> Install product NoAV NoDV NoPPL" = "Install Base Product 2019", "_Install product NoAV NoDV NoPPL", "RebootAgent";
deployment "_Install product NoAV NoDV NoPPL" = "_Install product"(
    ForceDisableAppVerifier: true,
    ForceDisableDriverVerifier: true,
    DisablePpl: true);

select deployment "Install product NoDV Chrome NeedReboot"(InstallationType)
{
    | "Regular"      => "_Install product NoDV Chrome"
    | "Upgrade 2019" => "Install 2019 -> Install product with reboot-45536 Impl"
    | _              => "_Install product NoDV Chrome"
}
deployment "Install 2019 -> Install product with reboot-45536 Impl" = "Install Base Product 2019", "_Install product NoDV Chrome";
deployment "_Install product NoDV Chrome" = "_Install product"(
    ForceDisableDriverVerifier: true,
    UpdateChromeToVersion: "71.0.3578.802");

select deployment "Install product with disabled PPL"(InstallationType)
{
    | "Regular"      => "_Install product with disabled PPL"
    | "Upgrade 2019" => "Install 2019 -> Install product with disabled PPL"
    | _              => "_Install product with disabled PPL"
}
deployment "Install 2019 -> Install product with disabled PPL" = "Install Base Product 2019", "_Install product with disabled PPL", "RebootAgent";
deployment "_Install product with disabled PPL" = "_Install product"(
    DisablePpl: true);

select deployment "Install product RunAtStartup"(InstallationType)
{
    | _ => "_Install product RunAtStartup"
    | "Regular" => "_Install product RunAtStartup"
    | "Upgrade 2019" => "Install 2019 -> Install product RunAtStartup"
}
deployment "Install 2019 -> Install product RunAtStartup" = "Install Base Product 2019", "_Install product RunAtStartup", "RebootAgent";
deployment "_Install product RunAtStartup" = "_Install product"(
    RunAtSystemStartup: true);

select deployment "[App10FS.Main] Install product with RunAtSystemStartup"(InstallationType)
{
    | _ => "_[App10FS.Main] Install product with RunAtSystemStartup"
    | "Regular" => "_[App10FS.Main] Install product with RunAtSystemStartup"
    | "Upgrade 2019" => "Install 2019 -> [App10FS.Main] Install product with RunAtSystemStartup"
}
deployment "Install 2019 -> [App10FS.Main] Install product with RunAtSystemStartup" = "Install Base Product 2019", "_[App10FS.Main] Install product with RunAtSystemStartup", "RebootAgent";
deployment "_[App10FS.Main] Install product with RunAtSystemStartup" = "_Install product"(
    RunAtSystemStartup: true,
    SetProductNameForFacade: false);

select deployment "Install product with reboot-3832 Impl"(InstallationType)
{
    | _ => "_Install product with reboot-3832 Impl"
    | "Regular" => "_Install product with reboot-3832 Impl"
    | "Upgrade 2019" => "Install 2019 -> Install product with reboot-3832 Impl"
}
deployment "Install 2019 -> Install product with reboot-3832 Impl" = "Install Base Product 2019", "_Install product with reboot-3832 Impl", "RebootAgent";
deployment "_Install product with reboot-3832 Impl" = "_Install product"(
    UpdateChromeToVersion: "71.0.3578.802",
    UpdateFirefoxToVersion: "64.0.2.1");

select deployment "Install product with activation backdoor and Firefox update"(InstallationType)
{
    | _ => "_Install product with activation backdoor and Firefox update"
    | "Regular" => "_Install product with activation backdoor and Firefox update"
    | "Upgrade 2019" => "Install 2019 -> Install product with activation backdoor and Firefox update"
}
deployment "Install 2019 -> Install product with activation backdoor and Firefox update" = "Install Base Product 2019", "_Install product with activation backdoor and Firefox update", "RebootAgent";
deployment "_Install product with activation backdoor and Firefox update" = "_Install product"(
    UpdateFirefoxToVersion: "64.0.2.1");

select deployment "Install product with activation code with reboot Impl"(InstallationType)
{
    | _ => "_Install product with activation code with reboot Impl"
    | "Regular" => "_Install product with activation code with reboot Impl"
    | "Upgrade 2019" => "Install 2019 -> Install product with activation code with reboot Impl"
}
deployment "Install 2019 -> Install product with activation code with reboot Impl" = "Install Base Product 2019", "_Install product with activation code with reboot Impl", "RebootAgent";
deployment "_Install product with activation code with reboot Impl" = "_Install product"(
    UpdateChromeToVersion: "71.0.3578.802",
    UpdateFirefoxToVersion: "64.0.2.1");

select deployment "Install product-45534"(InstallationType)
{
    | _ => "_Install product-45534"
    | "Regular" => "_Install product-45534"
    | "Upgrade 2019" => "Install 2019 -> Install product-45534"
}
deployment "Install 2019 -> Install product-45534" = "Install Base Product 2019", "_Install product-45534", "RebootAgent";
deployment "_Install product-45534" = "_Install product"(
    UpdateChromeToVersion: "71.0.3578.802 ",
    UpdateFirefoxToVersion: "64.0.2.1");

select deployment "[App2.Main] Install product with new Firefox"(InstallationType)
{
    | _ => "_[App2.Main] Install product with new Firefox"
    | "Regular" => "_[App2.Main] Install product with new Firefox"
    | "Upgrade 2019" => "Install 2019 -> [App2.Main] Install product with new Firefox"
}
deployment "Install 2019 -> [App2.Main] Install product with new Firefox" = "Install Base Product 2019", "_[App2.Main] Install product with new Firefox", "RebootAgent";
deployment "_[App2.Main] Install product with new Firefox" = "_Install product"(
    UpdateFirefoxToVersion: "64.0.2.1");

select deployment "Install product backdoor-50887"(InstallationType)
{
    | _ => "_Install product backdoor-50887"
    | "Regular" => "_Install product backdoor-50887"
    | "Upgrade 2019" => "Install 2019 -> Install product backdoor-50887"
}
deployment "Install 2019 -> Install product backdoor-50887" = "Install Base Product 2019", "_Install product backdoor-50887", "RebootAgent";
deployment "_Install product backdoor-50887" = "_Install product"(
    KPCRegion: "GB");

select deployment "Install product with App11 downgrade"(InstallationType)
{
    | _ => "_Install product with App11 downgrade"
    | "Regular" => "_Install product with App11 downgrade"
    | "Upgrade 2019" => "Install 2019 -> Install product with App11 downgrade"
}
deployment "Install 2019 -> Install product with App11 downgrade" = "Install Base Product 2019", "_Install product with App11 downgrade", "RebootAgent";
deployment "_Install product with App11 downgrade" = "_Install product"(
    EnableAutomaticApp11Downgrade: true);

select deployment "Install product with signed test agent-48799"(InstallationType)
{
    | _ => "_Install product with signed test agent-48799"
    | "Regular" => "_Install product with signed test agent-48799"
    | "Upgrade 2019" => "Install 2019 -> Install product with signed test agent-48799"
}
deployment "Install 2019 -> Install product with signed test agent-48799" = "Install Base Product 2019", "_Install product with signed test agent-48799", "RebootAgent";
deployment "_Install product with signed test agent-48799" = "_Install product"(
    BundleApp9: "Enabled");

select deployment "[App8.Main] No install"(InstallationType)
{
    | _ => "_[App8.Main] No install"
    | "Regular" => "_[App8.Main] No install"
    | "Upgrade 2019" => "Install 2019 -> [App8.Main] No install"
}
deployment "Install 2019 -> [App8.Main] No install" = "Install Base Product 2019", "_[App8.Main] No install", "RebootAgent";
deployment "_[App8.Main] No install" = "_Install product"(
    DisableProductInstallation: true,
    DisableTestModulesInstallation: true,
    ForceInstallCertificates: true,
    InstallLicenceBackdoor: "Off");

select deployment "Install product No Dump On assert"(InstallationType)
{
    | _ => "_Install product No Dump On assert"
    | "Regular" => "_Install product No Dump On assert"
    | "Upgrade 2019" => "Install 2019 -> Install product No Dump On assert"
}
deployment "Install 2019 -> Install product No Dump On assert" = "Install Base Product 2019", "_Install product No Dump On assert", "RebootAgent";
deployment "_Install product No Dump On assert" = "_Install product"(
    TurnOffDumpOnAssert: true);

select deployment "[App10FS.Main] Install product No Dump On Assert"(InstallationType)
{
    | _ => "_[App10FS.Main] Install product No Dump On Assert"
    | "Regular" => "_[App10FS.Main] Install product No Dump On Assert"
    | "Upgrade 2019" => "Install 2019 -> [App10FS.Main] Install product No Dump On Assert"
}
deployment "Install 2019 -> [App10FS.Main] Install product No Dump On Assert" = "Install Base Product 2019", "_[App10FS.Main] Install product No Dump On Assert", "RebootAgent";
deployment "_[App10FS.Main] Install product No Dump On Assert" = "_Install product"(
    SetProductNameForFacade: false,
    TurnOffDumpOnAssert: true);

select deployment "[App10.Main.BvtPvt.ML] Install No Accept EULAs"(InstallationType)
{
    | _ => "_[App10.Main.BvtPvt.ML] Install No Accept EULAs"
    | "Regular" => "_[App10.Main.BvtPvt.ML] Install No Accept EULAs"
    | "Upgrade 2019" => "Install 2019 -> [App10.Main.BvtPvt.ML] Install No Accept EULAs"
}
deployment "Install 2019 -> [App10.Main.BvtPvt.ML] Install No Accept EULAs" = "Install Base Product 2019", "_[App10.Main.BvtPvt.ML] Install No Accept EULAs", "RebootAgent";
deployment "_[App10.Main.BvtPvt.ML] Install No Accept EULAs" = "_Install product"(
    AcceptEula: "Off",
    AcceptKsnAgreement: "Off",
    AcceptMarketingAgreement: "Off",
    AcceptSocializationAgreement: "Off",
    BundleApp9: "Default");

select deployment "[Main.BvtPvt.ML] Install bundle No Accept EULAs"(InstallationType)
{
    | _ => "_[Main.BvtPvt.ML] Install bundle No Accept EULAs"
    | "Regular" => "_[Main.BvtPvt.ML] Install bundle No Accept EULAs"
    | "Upgrade 2019" => "Install 2019 -> [Main.BvtPvt.ML] Install bundle No Accept EULAs"
}
deployment "Install 2019 -> [Main.BvtPvt.ML] Install bundle No Accept EULAs" = "Install Base Product 2019", "_[Main.BvtPvt.ML] Install bundle No Accept EULAs", "RebootAgent";
deployment "_[Main.BvtPvt.ML] Install bundle No Accept EULAs" = "_Install product"(
    AcceptEula: "Off",
    AcceptKsnAgreement: "Off",
    AcceptMarketingAgreement: "Off",
    AcceptSocializationAgreement: "Off",
    BundleApp9: "Enabled",
    InstallActivationServerBackdoor: true);

select deployment "[App8.Main.Unsigned.Outlook] Install ISO Impl"(InstallationType)
{
    | _ => "_[App8.Main.Unsigned.Outlook] Install ISO Impl"
    | "Regular" => "_[App8.Main.Unsigned.Outlook] Install ISO Impl"
    | "Upgrade 2019" => "Install 2019 -> [App8.Main.Unsigned.Outlook] Install ISO Impl"
}
deployment "Install 2019 -> [App8.Main.Unsigned.Outlook] Install ISO Impl" = "Install Base Product 2019", "_[App8.Main.Unsigned.Outlook] Install ISO Impl", "RebootAgent";
deployment "_[App8.Main.Unsigned.Outlook] Install ISO Impl" = "_Install product"(
    DisableProductInstallation: true,
    DisableTestModulesInstallation: true,
    DisableVSCollectorsDeployment: true,
    SetProductNameForFacade: false);

select deployment "Install product with App9"(InstallationType)
{
    | _ => "_Install product with App9"
    | "Regular" => "_Install product with App9"
    | "Upgrade 2019" => "Install 2019 -> Install product with App9"
}
deployment "Install 2019 -> Install product with App9" = "Install Base Product 2019", "_Install product with App9", "RebootAgent";
deployment "_Install product with App9" = "_Install product"(
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_WithApp9.Main.Additional");

select deployment "[App8.Main.Mock] Copy product distributive"(InstallationType)
{
    | _ => "_[App8.Main.Mock] Copy product distributive"
    | "Regular" => "_[App8.Main.Mock] Copy product distributive"
    | "Upgrade 2019" => "Install 2019 -> [App8.Main.Mock] Copy product distributive"
}
deployment "Install 2019 -> [App8.Main.Mock] Copy product distributive" = "Install Base Product 2019", "_[App8.Main.Mock] Copy product distributive", "RebootAgent";
deployment "_[App8.Main.Mock] Copy product distributive" = "_Install product"(
    DisableProductInstallation: true,
    DisableTestModulesInstallation: true,
    ForceInstallCertificates: true,
    SetProductNameForFacade: false);

select deployment "[App8.Main.KpcInfra] Install product "(InstallationType)
{
    | _ => "_[App8.Main.KpcInfra] Install product "
    | "Regular" => "_[App8.Main.KpcInfra] Install product "
    | "Upgrade 2019" => "Install 2019 -> [App8.Main.KpcInfra] Install product "
}
deployment "Install 2019 -> [App8.Main.KpcInfra] Install product " = "Install Base Product 2019", "_[App8.Main.KpcInfra] Install product ", "RebootAgent";
deployment "_[App8.Main.KpcInfra] Install product " = "_Install product"(
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2.Main.Additional.LicenseRequest",
    ForceDisableAppVerifier: true,
    ForceTraceLevel: "1000",
    InstallLicenceBackdoor: "Off",
    Verbose: true);

select deployment "[MOCK] App8 Free with App9"(InstallationType)
{
    | _ => "_[MOCK] App8 Free with App9"
    | "Regular" => "_[MOCK] App8 Free with App9"
    | "Upgrade 2019" => "Install 2019 -> [MOCK] App8 Free with App9"
}
deployment "Install 2019 -> [MOCK] App8 Free with App9" = "Install Base Product 2019", "_[MOCK] App8 Free with App9", "RebootAgent";
deployment "_[MOCK] App8 Free with App9" = "_Install product"(
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_WithApp9.Main.Additional",
    SuggestApp3: "On");

select deployment "[App8.Main.FileShredder] Install product with activation code + traceLevel"(InstallationType)
{
    | _ => "_[App8.Main.FileShredder] Install product with activation code + traceLevel"
    | "Regular" => "_[App8.Main.FileShredder] Install product with activation code + traceLevel"
    | "Upgrade 2019" => "Install 2019 -> [App8.Main.FileShredder] Install product with activation code + traceLevel"
}
deployment "Install 2019 -> [App8.Main.FileShredder] Install product with activation code + traceLevel" = "Install Base Product 2019", "_[App8.Main.FileShredder] Install product with activation code + traceLevel", "RebootAgent";
deployment "_[App8.Main.FileShredder] Install product with activation code + traceLevel" = "_Install product"(
    ForceTraceLevel: "800");

select deployment "[Main.UpgradeSettingsByReinstall] Install product"(InstallationType)
{
    | _ => "_[Main.UpgradeSettingsByReinstall] Install product"
    | "Regular" => "_[Main.UpgradeSettingsByReinstall] Install product"
    | "Upgrade 2019" => "Install 2019 -> [Main.UpgradeSettingsByReinstall] Install product"
}
deployment "Install 2019 -> [Main.UpgradeSettingsByReinstall] Install product" = "Install Base Product 2019", "_[Main.UpgradeSettingsByReinstall] Install product", "RebootAgent";
deployment "_[Main.UpgradeSettingsByReinstall] Install product" = "_Install product"(
    ActivateEmbeddedTrial: true,
    InstallLicenceBackdoor: "Off",
    RunAtSystemStartup: true,
    SetProductNameForFacade: false,
    TurnOffProtection: true);
        
select deployment "[Main.BvtPvt.MailAv] Mount ISO Impl"(InstallationType)
{
    | _ => "_[Main.BvtPvt.MailAv] Mount ISO Impl"
    | "Regular" => "_[Main.BvtPvt.MailAv] Mount ISO Impl"
    | "Upgrade 2019" => "Install 2019 -> [Main.BvtPvt.MailAv] Mount ISO Impl"
}
deployment "Install 2019 -> [Main.BvtPvt.MailAv] Mount ISO Impl" = "Install Base Product 2019", "_[Main.BvtPvt.MailAv] Mount ISO Impl", "RebootAgent";
deployment "_[Main.BvtPvt.MailAv] Mount ISO Impl" = "_Install product"(
    DisableProductInstallation: true,
    DisableTestModulesInstallation: true,
    SetProductNameForFacade: false);

select deployment "[Main.BvtPvt.ML] Install product No Accept EULAs"(InstallationType)
{
    | _ => "_[Main.BvtPvt.ML] Install product No Accept EULAs"
    | "Regular" => "_[Main.BvtPvt.ML] Install product No Accept EULAs"
    | "Upgrade 2019" => "Install 2019 -> [Main.BvtPvt.ML] Install product No Accept EULAs"
}
deployment "Install 2019 -> [Main.BvtPvt.ML] Install product No Accept EULAs" = "Install Base Product 2019", "_[Main.BvtPvt.ML] Install product No Accept EULAs", "RebootAgent";
deployment "_[Main.BvtPvt.ML] Install product No Accept EULAs" = "_Install product"(
    AcceptEula: "Off",
    AcceptKsnAgreement: "Off",
    AcceptMarketingAgreement: "Off",
    AcceptSocializationAgreement: "Off",
    BundleApp9: "Disabled");

select deployment "Install product-46909"(InstallationType)
{
    | _ => "_Install product-46909"
    | "Regular" => "_Install product-46909"
    | "Upgrade 2019" => "Install 2019 -> Install product-46909"
}
deployment "Install 2019 -> Install product-46909" = "Install Base Product 2019", "_Install product-46909", "RebootAgent";
deployment "_Install product-46909" = "_Install product"(
    InstallLib1: true);

select deployment "Install product [Enabled downgrade]"(InstallationType)
{
    | _ => "_Install product [Enabled downgrade]"
    | "Regular" => "_Install product [Enabled downgrade]"
    | "Upgrade 2019" => "Install 2019 -> Install product [Enabled downgrade]"
}
deployment "Install 2019 -> Install product [Enabled downgrade]" = "Install Base Product 2019", "_Install product [Enabled downgrade]", "RebootAgent";
deployment "_Install product [Enabled downgrade]" = "_Install product"(
    EnableAutomaticApp11Downgrade: true,
    InstallLicenceBackdoor: "Off");

select deployment "Install product Tracelevel_800"(InstallationType)
{
    | _ => "_Install product Tracelevel_800"
    | "Regular" => "_Install product Tracelevel_800"
    | "Upgrade 2019" => "Install 2019 -> Install product Tracelevel_800"
}
deployment "Install 2019 -> Install product Tracelevel_800" = "Install Base Product 2019", "_Install product Tracelevel_800", "RebootAgent";
deployment "_Install product Tracelevel_800" = "_Install product"(
    ForceTraceLevel: "800");

select deployment "Install product-4105"(InstallationType)
{
    | _ => "_Install product-4105"
    | "Regular" => "_Install product-4105"
    | "Upgrade 2019" => "Install 2019 -> Install product-4105"
}
deployment "Install 2019 -> Install product-4105" = "Install Base Product 2019", "_Install product-4105", "RebootAgent";
deployment "_Install product-4105" = "_Install product"(
    ForceTraceLevel: "800",
    SetProductNameForFacade: false);

select deployment "[Ucp.Mock] Copy product distributive"(InstallationType)
{
    | _ => "_[Ucp.Mock] Copy product distributive"
    | "Regular" => "_[Ucp.Mock] Copy product distributive"
    | "Upgrade 2019" => "Install 2019 -> [Ucp.Mock] Copy product distributive"
}
deployment "Install 2019 -> [Ucp.Mock] Copy product distributive" = "Install Base Product 2019", "_[Ucp.Mock] Copy product distributive", "RebootAgent";
deployment "_[Ucp.Mock] Copy product distributive" = "_Install product"(
    DisableProductInstallation: true,
    DisableTestModulesInstallation: true,
    ForceInstallCertificates: true,
    SetProductNameForFacade: false);

select deployment "No install"(InstallationType)
{
    | _ => "_No install"
    | "Regular" => "_No install"
    | "Upgrade 2019" => "Install 2019 -> No install"
}
deployment "Install 2019 -> No install" = "Install Base Product 2019", "_No install", "RebootAgent";
deployment "_No install" = "_Install product"(
    DisableProductInstallation: true,
    DisableTestModulesInstallation: true,
    ForceInstallCertificates: true);

select deployment "Intstall App2_+App9 no EULA acceptance-11101 Impl"(InstallationType)
{
    | _ => "_Intstall App2_+App9 no EULA acceptance-11101 Impl"
    | "Regular" => "_Intstall App2_+App9 no EULA acceptance-11101 Impl"
    | "Upgrade 2019" => "Install 2019 -> Intstall App2_+App9 no EULA acceptance-11101 Impl"
}
deployment "Install 2019 -> Intstall App2_+App9 no EULA acceptance-11101 Impl" = "Install Base Product 2019", "_Intstall App2_+App9 no EULA acceptance-11101 Impl", "RebootAgent";
deployment "_Intstall App2_+App9 no EULA acceptance-11101 Impl" = "_Install product"(
    AcceptEula: "Off",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_WithApp9.Main.Additional");

select deployment "Intstall App2_+App9 Impl"(InstallationType)
{
    | _ => "_Intstall App2_+App9 Impl"
    | "Regular" => "_Intstall App2_+App9 Impl"
    | "Upgrade 2019" => "Install 2019 -> Intstall App2_+App9 Impl"
}
deployment "Install 2019 -> Intstall App2_+App9 Impl" = "Install Base Product 2019", "_Intstall App2_+App9 Impl", "RebootAgent";
deployment "_Intstall App2_+App9 Impl" = "_Install product"(
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_WithApp9.Main.Additional");

select deployment "Install two products"(InstallationType)
{
    | _ => "_Install two products"
    | "Regular" => "_Install two products"
    | "Upgrade 2019" => "Install 2019 -> Install two products"
}
deployment "Install 2019 -> Install two products" = "Install Base Product 2019", "_Install two products", "RebootAgent";
deployment "_Install two products" = "_Install product"(
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_WithApp9.Main.Additional",
    BundleApp9: "Enabled");

select deployment "Install product backdoor and request family App8"(InstallationType)
{
    | _ => "_Install product backdoor and request family App8"
    | "Regular" => "_Install product backdoor and request family App8"
    | "Upgrade 2019" => "Install 2019 -> Install product backdoor and request family App8"
}
deployment "Install 2019 -> Install product backdoor and request family App8" = "Install Base Product 2019", "_Install product backdoor and request family App8", "RebootAgent";
deployment "_Install product backdoor and request family App8" = "_Install product"(
    KPCRegion: "GB",
    RequestApp8TrialTier: "Family");

select deployment "Install product backdoor and register with fake code"(InstallationType)
{
    | _ => "_Install product backdoor and register with fake code"
    | "Regular" => "_Install product backdoor and register with fake code"
    | "Upgrade 2019" => "Install 2019 -> Install product backdoor and register with fake code"
}
deployment "Install 2019 -> Install product backdoor and register with fake code" = "Install Base Product 2019", "_Install product backdoor and register with fake code", "RebootAgent";
deployment "_Install product backdoor and register with fake code" = "_Install product"(
    KpcActivationCode: "SKNSD-DLKDJ-LDJNS",
    KpcCompanyId: "dwxdsxdwe@Company.com",
    KpcOneTimeRegistrationSharedSecret: ";zskdflsjkdflkjsdklfj",
    KpcUserId: "05CD0BCF-246E-4262-8277-6A9ADB54E138");

select deployment "Install product backdoor and register with one time registration-46723"(InstallationType)
{
    | _ => "_Install product backdoor and register with one time registration-46723"
    | "Regular" => "_Install product backdoor and register with one time registration-46723"
    | "Upgrade 2019" => "Install 2019 -> Install product backdoor and register with one time registration-46723"
}
deployment "Install 2019 -> Install product backdoor and register with one time registration-46723" = "Install Base Product 2019", "_Install product backdoor and register with one time registration-46723", "RebootAgent";
deployment "_Install product backdoor and register with one time registration-46723" = "_Install product"(
    KpcActivationCode: "12113-12113-12113-12113",
    KpcCompanyId: "Company@example.com",
    KpcOneTimeRegistrationSharedSecret: "asdfasdfsdfsadf adfsdfasdf",
    KpcUserId: "09C64BCF-E86E-6162-8877-6A92DB54E138");

select deployment "Install product backdoor and register with one time registration-50886"(InstallationType)
{
    | _ => "_Install product backdoor and register with one time registration-50886"
    | "Regular" => "_Install product backdoor and register with one time registration-50886"
    | "Upgrade 2019" => "Install 2019 -> Install product backdoor and register with one time registration-50886"
}
deployment "Install 2019 -> Install product backdoor and register with one time registration-50886" = "Install Base Product 2019", "_Install product backdoor and register with one time registration-50886", "RebootAgent";
deployment "_Install product backdoor and register with one time registration-50886" = "_Install product"(
    KpcActivationCode: "12113-12113-12113-12113",
    KpcCompanyId: "dwxdsxdwe@Company.com",
    KpcOneTimeRegistrationSharedSecret: "aksdhflkashfdklajsfhdlaskjdfh",
    KpcUserId: "09C606CF-E86E-6162-8877-6A925B54E138");

select deployment "[Ucp.Mock] Install product with one time shared secret"(InstallationType)
{
    | _ => "_[Ucp.Mock] Install product with one time shared secret"
    | "Regular" => "_[Ucp.Mock] Install product with one time shared secret"
    | "Upgrade 2019" => "Install 2019 -> [Ucp.Mock] Install product with one time shared secret"
}
deployment "Install 2019 -> [Ucp.Mock] Install product with one time shared secret" = "Install Base Product 2019", "_[Ucp.Mock] Install product with one time shared secret", "RebootAgent";
deployment "_[Ucp.Mock] Install product with one time shared secret" = "_Install product"(
    KpcActivationCode: "12113-12113-12113-12113",
    KpcCompanyId: "Company@example.com",
    KpcOneTimeRegistrationSharedSecret: "skldjf;slkdjfa;skldfj;aslkdfjlsajkdf",
    KpcUserId: "A1F57560-1B67-4C6A-9E5B-D1BF5668AC93",
    SetProductNameForFacade: false);

select deployment "Install product backdoor downloader.ini"(InstallationType)
{
    | _ => "_Install product backdoor downloader.ini"
    | "Regular" => "_Install product backdoor downloader.ini"
    | "Upgrade 2019" => "Install 2019 -> Install product backdoor downloader.ini"
}
deployment "Install 2019 -> Install product backdoor downloader.ini" = "Install Base Product 2019", "_Install product backdoor downloader.ini", "RebootAgent";
deployment "_Install product backdoor downloader.ini" = "_Install product"(
    KpcActivationCode: "12113-12113-12113-12113",
    KpcCompanyId: "Company@example.com",
    KpcOneTimeRegistrationSharedSecret: "skldjf;slkdjfa;skldfj;aslkdfjlsajkdf",
    KpcUserId: "1bf43778-7bf7-4acf-a6f7-af8aaf7b8bd4");

select deployment "Install product-4890"(InstallationType)
{
    | _ => "_Install product-4890"
    | "Regular" => "_Install product-4890"
    | "Upgrade 2019" => "Install 2019 -> Install product-4890"
}
deployment "Install 2019 -> Install product-4890" = "Install Base Product 2019", "_Install product-4890", "RebootAgent";
deployment "_Install product-4890" = "_Install product"(
    SuggestApp3: "On");

select deployment "Install product GDPR-46786"(InstallationType)
{
    | _ => "_Install product GDPR-46786"
    | "Regular" => "_Install product GDPR-46786"
    | "Upgrade 2019" => "Install 2019 -> Install product GDPR-46786"
}
deployment "Install 2019 -> Install product GDPR-46786" = "Install Base Product 2019", "_Install product GDPR-46786", "RebootAgent";
deployment "_Install product GDPR-46786" = "_Install product"(
    EnableAutomaticApp11Downgrade: true,
    UseGDPR: "On");

select deployment "Install product GDPR-2783"(InstallationType)
{
    | _ => "_Install product GDPR-2783"
    | "Regular" => "_Install product GDPR-2783"
    | "Upgrade 2019" => "Install 2019 -> Install product GDPR-2783"
}
deployment "Install 2019 -> Install product GDPR-2783" = "Install Base Product 2019", "_Install product GDPR-2783", "RebootAgent";
deployment "_Install product GDPR-2783" = "_Install product"(
    InstallLicenceBackdoor: "Off",
    UseGDPR: "On");

select deployment "[App2.Main.Signed.Agreements] Install product GDPR EulaMarketingKsn"(InstallationType)
{
    | _ => "_[App2.Main.Signed.Agreements] Install product GDPR EulaMarketingKsn"
    | "Regular" => "_[App2.Main.Signed.Agreements] Install product GDPR EulaMarketingKsn"
    | "Upgrade 2019" => "Install 2019 -> [App2.Main.Signed.Agreements] Install product GDPR EulaMarketingKsn"
}
deployment "Install 2019 -> [App2.Main.Signed.Agreements] Install product GDPR EulaMarketingKsn" = "Install Base Product 2019", "_[App2.Main.Signed.Agreements] Install product GDPR EulaMarketingKsn", "RebootAgent";
deployment "_[App2.Main.Signed.Agreements] Install product GDPR EulaMarketingKsn" = "_Install product"(
    AcceptSocializationAgreement: "Default",
    BundleApp9: "Disabled",
    UseGDPR: "On");

select deployment "[App2.Main.Signed.Agreements] Install product GDPR EulaMarketing"(InstallationType)
{
    | _ => "_[App2.Main.Signed.Agreements] Install product GDPR EulaMarketing"
    | "Regular" => "_[App2.Main.Signed.Agreements] Install product GDPR EulaMarketing"
    | "Upgrade 2019" => "Install 2019 -> [App2.Main.Signed.Agreements] Install product GDPR EulaMarketing"
}
deployment "Install 2019 -> [App2.Main.Signed.Agreements] Install product GDPR EulaMarketing" = "Install Base Product 2019", "_[App2.Main.Signed.Agreements] Install product GDPR EulaMarketing", "RebootAgent";
deployment "_[App2.Main.Signed.Agreements] Install product GDPR EulaMarketing" = "_Install product"(
    AcceptKsnAgreement: "Off",
    AcceptSocializationAgreement: "Default",
    BundleApp9: "Disabled",
    UseGDPR: "On");

select deployment "[App2.Main.Signed.Agreements] Install product GDPR EulaKsn"(InstallationType)
{
    | _ => "_[App2.Main.Signed.Agreements] Install product GDPR EulaKsn"
    | "Regular" => "_[App2.Main.Signed.Agreements] Install product GDPR EulaKsn"
    | "Upgrade 2019" => "Install 2019 -> [App2.Main.Signed.Agreements] Install product GDPR EulaKsn"
}
deployment "Install 2019 -> [App2.Main.Signed.Agreements] Install product GDPR EulaKsn" = "Install Base Product 2019", "_[App2.Main.Signed.Agreements] Install product GDPR EulaKsn", "RebootAgent";
deployment "_[App2.Main.Signed.Agreements] Install product GDPR EulaKsn" = "_Install product"(
    AcceptMarketingAgreement: "Off",
    AcceptSocializationAgreement: "Default",
    BundleApp9: "Disabled",
    UseGDPR: "On");

select deployment "[App2.Main.Signed.Agreements] Install product GDPR Eula"(InstallationType)
{
    | _ => "_[App2.Main.Signed.Agreements] Install product GDPR Eula"
    | "Regular" => "_[App2.Main.Signed.Agreements] Install product GDPR Eula"
    | "Upgrade 2019" => "Install 2019 -> [App2.Main.Signed.Agreements] Install product GDPR Eula"
}
deployment "Install 2019 -> [App2.Main.Signed.Agreements] Install product GDPR Eula" = "Install Base Product 2019", "_[App2.Main.Signed.Agreements] Install product GDPR Eula", "RebootAgent";
deployment "_[App2.Main.Signed.Agreements] Install product GDPR Eula" = "_Install product"(
    AcceptKsnAgreement: "Off",
    AcceptMarketingAgreement: "Off",
    AcceptSocializationAgreement: "Default",
    BundleApp9: "Disabled",
    UseGDPR: "On");

select deployment "[App2.Main.Signed.Agreements] Install product EulaKsn"(InstallationType)
{
    | _ => "_[App2.Main.Signed.Agreements] Install product EulaKsn"
    | "Regular" => "_[App2.Main.Signed.Agreements] Install product EulaKsn"
    | "Upgrade 2019" => "Install 2019 -> [App2.Main.Signed.Agreements] Install product EulaKsn"
}
deployment "Install 2019 -> [App2.Main.Signed.Agreements] Install product EulaKsn" = "Install Base Product 2019", "_[App2.Main.Signed.Agreements] Install product EulaKsn", "RebootAgent";
deployment "_[App2.Main.Signed.Agreements] Install product EulaKsn" = "_Install product"(
    AcceptMarketingAgreement: "Off",
    AcceptSocializationAgreement: "Default",
    BundleApp9: "Disabled",
    UseGDPR: "Off");

select deployment "[App2.Main.Signed.Agreements] Install product Eula"(InstallationType)
{
    | _ => "_[App2.Main.Signed.Agreements] Install product Eula"
    | "Regular" => "_[App2.Main.Signed.Agreements] Install product Eula"
    | "Upgrade 2019" => "Install 2019 -> [App2.Main.Signed.Agreements] Install product Eula"
}
deployment "Install 2019 -> [App2.Main.Signed.Agreements] Install product Eula" = "Install Base Product 2019", "_[App2.Main.Signed.Agreements] Install product Eula", "RebootAgent";
deployment "_[App2.Main.Signed.Agreements] Install product Eula" = "_Install product"(
    AcceptKsnAgreement: "Off",
    AcceptMarketingAgreement: "Off",
    AcceptSocializationAgreement: "Default",
    BundleApp9: "Disabled",
    UseGDPR: "Off");

select deployment "[App2.Main.Installation] No install"(InstallationType)
{
    | _ => "_[App2.Main.Installation] No install"
    | "Regular" => "_[App2.Main.Installation] No install"
    | "Upgrade 2019" => "Install 2019 -> [App2.Main.Installation] No install"
}
deployment "Install 2019 -> [App2.Main.Installation] No install" = "Install Base Product 2019", "_[App2.Main.Installation] No install", "RebootAgent";
deployment "_[App2.Main.Installation] No install" = "_Install product"(
    DisableProductInstallation: true,
    DisableTestModulesInstallation: true,
    ForceInstallCertificates: true,
    SetProductNameForFacade: false);

select deployment "Install product GDPR-46615"(InstallationType)
{
    | _ => "_Install product GDPR-46615"
    | "Regular" => "_Install product GDPR-46615"
    | "Upgrade 2019" => "Install 2019 -> Install product GDPR-46615"
}
deployment "Install 2019 -> Install product GDPR-46615" = "Install Base Product 2019", "_Install product GDPR-46615", "RebootAgent";
deployment "_Install product GDPR-46615" = "_Install product"(
    EnableAutomaticApp11Downgrade: true,
    InstallLicenceBackdoor: "Off",
    UseGDPR: "On");

select deployment "[Ucp.Mock] Install product with family trial"(InstallationType)
{
    | _ => "_[Ucp.Mock] Install product with family trial"
    | "Regular" => "_[Ucp.Mock] Install product with family trial"
    | "Upgrade 2019" => "Install 2019 -> [Ucp.Mock] Install product with family trial"
}
deployment "Install 2019 -> [Ucp.Mock] Install product with family trial" = "Install Base Product 2019", "_[Ucp.Mock] Install product with family trial", "RebootAgent";
deployment "_[Ucp.Mock] Install product with family trial" = "_Install product"(
    RequestApp8TrialTier: "Family",
    SetProductNameForFacade: false);

select deployment "Install product-1379"(InstallationType)
{
    | _ => "_Install product-1379"
    | "Regular" => "_Install product-1379"
    | "Upgrade 2019" => "Install 2019 -> Install product-1379"
}
deployment "Install 2019 -> Install product-1379" = "Install Base Product 2019", "_Install product-1379", "RebootAgent";
deployment "_Install product-1379" = "_Install product"(
    StartService: true);

select deployment "Install product (With full Traces) Impl"(InstallationType)
{
    | _ => "_Install product (With full Traces) Impl"
    | "Regular" => "_Install product (With full Traces) Impl"
    | "Upgrade 2019" => "Install 2019 -> Install product (With full Traces) Impl"
}
deployment "Install 2019 -> Install product (With full Traces) Impl" = "Install Base Product 2019", "_Install product (With full Traces) Impl", "RebootAgent";
deployment "_Install product (With full Traces) Impl" = "_Install product"(
    ForceTraceLevel: "1000",
    InstallLicenceBackdoor: "Off");

select deployment "Install product GDPR backdoor"(InstallationType)
{
    | _ => "_Install product GDPR backdoor"
    | "Regular" => "_Install product GDPR backdoor"
    | "Upgrade 2019" => "Install 2019 -> Install product GDPR backdoor"
}
deployment "Install 2019 -> Install product GDPR backdoor" = "Install Base Product 2019", "_Install product GDPR backdoor", "RebootAgent";
deployment "_Install product GDPR backdoor" = "_Install product"(
    UseGDPR: "On");

select deployment "[App2.Main.Installation] Install product"(InstallationType)
{
    | _ => "_[App2.Main.Installation] Install product"
    | "Regular" => "_[App2.Main.Installation] Install product"
    | "Upgrade 2019" => "Install 2019 -> [App2.Main.Installation] Install product"
}
deployment "Install 2019 -> [App2.Main.Installation] Install product" = "Install Base Product 2019", "_[App2.Main.Installation] Install product", "RebootAgent";
deployment "_[App2.Main.Installation] Install product" = "_Install product"(
    RunAtSystemStartup: true);


// App9 installations

deployment "[App9Install] Install" = "Install App9"(
    ForceInstallCertificates: true);

deployment "App9 NoInstall" = "Install App9"(
    DisableProductInstallation: true,
    DisableTestModulesInstallation: true,
    ForceInstallCertificates: true);

deployment "Install App9 modules after App2 no EULA acceptance-11102 Impl" = "Install App9"(
    AcceptEula: "Off",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_WithApp9.Main.Additional",
    DisableProductInstallation: true,
    App9WasInstalledInBundlePreviously: true);

deployment "Install App9 modules after Main Product Impl" = "Install App9"(
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_WithApp9.Main.Additional",
    DisableProductInstallation: true,
    App9WasInstalledInBundlePreviously: true);

deployment "Install App9 with Lib1" = "Install App9"(
    InstallLib1: true);

deployment "Install App9 GUI test app" = "Install GUI test app"(
    TestAppPackName: "CompanyLab.App9.UI.TestApp.zip");


// Base product installations

deployment "Install product for TFU" = "_Install product"(
    ForceDisableDriverVerifier: true,
    RunAtSystemStartup: true);

deployment "Tfu Install Base product-48256" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    RunAtSystemStartup: true,
    SetProductNameForFacade: false,
    TurnOffProtection: true);

deployment "Install 2017 with fw Impl" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_2017.MP0.AdditionalContinuousIntegration",
    DisableTestModulesInstallation: true,
    DisableVSCollectorsDeployment: true,
    InstallActivationServerBackdoor: true,
    SetProductNameForFacade: false,
    StartService: true,
    TurnOffDumpOnAssert: true,
    UseCollections: "On");

deployment "Install 2017 with fw RunAtStartup Impl" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_2017.MP0.AdditionalContinuousIntegration",
    DisableTestModulesInstallation: true,
    DisableVSCollectorsDeployment: true,
    InstallActivationServerBackdoor: true,
    RunAtSystemStartup: true,
    SetProductNameForFacade: false,
    StartService: true,
    TurnOffDumpOnAssert: true,
    UseCollections: "On");

deployment "[App2_2019.MR0] Install 2019 with fw Impl" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_2019.MP0.AdditionalContinuousIntegration",
    DisableTestModulesInstallation: true,
    DisableVSCollectorsDeployment: true,
    InstallActivationServerBackdoor: true,
    SetProductNameForFacade: false,
    StartService: true,
    TurnOffDumpOnAssert: true,
    UseCollections: "On");

deployment "[App2_2019.MR0] Install 2019 with RunAtSystemStartup Impl" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_2019.MP0.AdditionalContinuousIntegration",
    DisableTestModulesInstallation: true,
    DisableVSCollectorsDeployment: true,
    InstallActivationServerBackdoor: true,
    RunAtSystemStartup: true,
    SetProductNameForFacade: false,
    StartService: true,
    TurnOffDumpOnAssert: true,
    UseCollections: "On");

deployment "Install Base product with lic mock" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    ForceDisableDriverVerifier: true,
    RunAtSystemStartup: true);

deployment "[App8.Main.TFU] Install previous product version" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\ProductBuild",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2.Main.Additional.LicenseRequest",
    ForceDisableDriverVerifier: true,
    InstallLicenceBackdoor: "Off",
    RunAtSystemStartup: true);

deployment "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_2016.MP0.AdditionalContinuousIntegration",
    DisableTestModulesInstallation: true,
    DisableVSCollectorsDeployment: true,
    InstallActivationServerBackdoor: true,
    SetProductNameForFacade: false,
    StartService: true,
    TurnOffDumpOnAssert: true,
    UseCollections: "On");

deployment "Install previous product version-51162 Impl" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\ProductBuild",
    ForceDisableDriverVerifier: true,
    InstallActivationServerBackdoor: true);

deployment "[App11InstallProduct] Install 2017 with RunAtSystemStartup" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_2016.MP0.AdditionalContinuousIntegration",
    DisableTestModulesInstallation: true,
    DisableVSCollectorsDeployment: true,
    InstallActivationServerBackdoor: true,
    RunAtSystemStartup: true,
    SetProductNameForFacade: false,
    StartService: true,
    TurnOffDumpOnAssert: true,
    UseCollections: "On");

deployment "[App11InstallProduct] Install 2017 no backdoor" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_2016.MP0.AdditionalContinuousIntegration",
    DisableTestModulesInstallation: true,
    DisableVSCollectorsDeployment: true,
    InstallActivationServerBackdoor: true,
    InstallLicenceBackdoor: "Off",
    SetProductNameForFacade: false,
    StartService: true,
    TurnOffDumpOnAssert: true,
    UseCollections: "On");

deployment "[Main.TFU.Custom] Install previous product version" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    DisableTestModulesInstallation: true,
    InstallActivationServerBackdoor: true,
    TurnOffProtection: true);

deployment "[Main.TFU.Custom] Install previous product version with test modules" = "_Install product"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    InstallActivationServerBackdoor: true,
    TurnOffProtection: true);

deployment "Install previous product version-49122 Impl" = "deploy_patch_Execute"(
    InstallLicenceBackdoor: "On");

deployment "[Main.UpgradeSettings] Install previous product version with enabled protection" = "deploy_patch_Execute"(
    ActivateEmbeddedTrial: false,
    backdoorSet: "All");

deployment "Install previous product version-49114 Impl" = "deploy_patch_Execute"(
    backdoorSet: "All",
    InstallLicenceBackdoor: "On");

deployment "[Main.Upgrade.Builds2] Install previous product version" = "deploy_patch_Execute"(
    backdoorSet: "All",
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    ForceDownloadBackdoors: false,
    InstallActivationServerBackdoor: true,
    TurnOffProtection: true);

deployment "[Main.TFU.Builds2] Install previous product version" = "deploy_patch_Execute"(
    backdoorSet: "Base",
	BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
	DisableTestModulesInstallation: true,
	ForceDownloadBackdoors: false,
	InstallActivationServerBackdoor: true,
	TurnOffProtection: false);

deployment "Install old product Impl" = "deploy_patch_Execute"(
    ForceDownloadBackdoors: false,
    InstallActivationServerBackdoor: true,
    RunAtSystemStartup: false);

deployment "[App2.Main.Installation] Install previous product version" = "deploy_patch_Execute"(
    InstallActivationServerBackdoor: true,
    SkipRecommendedSettings: true);

deployment "[App8.Main.UpgradeSettingsFromOldVersion] Install previous product version" = "deploy_patch_Execute"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    backdoorSet: "All",
    InstallLicenceBackdoor: "On",
    TurnOffProtection: true);

deployment "Install previous product version" = "deploy_patch_Execute"(
    ForceDisableDriverVerifier: true,
    ForceDownloadBackdoors: false,
    InstallActivationServerBackdoor: true,
    InstallLicenceBackdoor: "On");

deployment "[App82019.MP0.TFU] Install previous product version" = "deploy_patch_Execute"(
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_2019.MP0.Additional.LicenseRequest",
    ForceDisableDriverVerifier: true,
    ForceDownloadBackdoors: false,
    SetProductNameForFacade: true);

deployment "Install previous version product" = "deploy_patch_Execute"(
    ForceDownloadBackdoors: false,
    RunAtSystemStartup: false,
    SetProductNameForFacade: true);

deployment "[App2_2018.MP0.TFU] Install previous product version" = "deploy_patch_Execute"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\AdditionalFiles\App2_2018.MP0.AdditionalContinuousIntegration",
    DisableTestModulesInstallation: true,
    ForceDownloadBackdoors: false,
    InstallActivationServerBackdoor: true);

deployment "Copy previous product no backdoor" = "deploy_patch_Execute"(
    BuildPath: @"$(SessionWorkFolder)\ProductBuild",
    DisableProductInstallation: true,
    DisableTestModulesInstallation: true,
    ForceInstallCertificates: true,
    RunAtSystemStartup: false);

deployment "Copy old product distributive Impl" = "deploy_patch_Execute"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    DisableProductInstallation: true,
    DisableTestModulesInstallation: true,
    ForceInstallCertificates: true,
    InstallLicenceBackdoor: "On",
    RunAtSystemStartup: false);

deployment "Install base App9 with certs" = "Install App9"(
    BuildPath: @"$(SessionWorkFolder)\BaseProductBuild",
    ForceInstallCertificates: true);


// Non-product deployments

deployment "Disable UAC" = "Disable UAC Impl", "RebootAgent";

deployment "Set PROD environment" = "set environment variables"(
    PortalVersionFolder: "");

deployment "Set environment values-51185 Impl" = "set environment variables"(
    LoginURL: "Beta",
    UserCountry: "RussianFederation",
    UserLanguage: "RussianRU");

deployment "Set environment values-51176 Impl" = "set environment variables"(
    UserCountry: "RussianFederation",
    UserLanguage: "RussianRU");

deployment "Set environment values-49140 Impl" = "set environment variables"(
    UseMailProxy: "hqproxy");

deployment "[Ucp.Beta.Mats.App2_] Set environment values" = "set environment variables"(
    LoginURL: "Beta");

deployment "[App1_InstallProduct] Set BETA environment values-11971 Impl" = "set environment variables"(
    LoginURL: "Beta",
    PortalVersionFolder: "");

deployment "[App2.TFU] Run TFU update Impl" = "[App2.TFU] Prepare environment and reboot Impl"(
    Command: "");

deployment "Copy additional files 2019" = "copyAdditionalFilesTo_Execute"(
    AdditionalFiles: @"\\TIS-DFS\Autotests\App2\Binaries\App2_2019.MP0.Autotest.United\LatestBuild");

deployment "Copy additional files 2018" = "copyAdditionalFilesTo_Execute"(
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\Binaries\App2_2018.MP0.Autotest.United\LatestBuild");

deployment "Copy additional files [Main]" = "copyAdditionalFilesTo_Execute"(
    AdditionalFiles: @"\\tis-dfs.company.ru\Autotests\App2\Binaries\App2.Main.Autotest.United\LatestBuild");

deployment "Copy new version distributive" = "copyAdditionalFilesTo_Execute"(
    TargetFolder: @"C:\installNewVersion");

deployment "Copy last two versions" = "Copy last two versions copy base", "Copy last two versions copy new";

deployment "Copy last two versions copy base" = "copyAdditionalFilesTo_Execute"(
    AdditionalFiles : @"$(SessionWorkFolder)\BaseProductBuild",
    TargetFolder: @"C:\install");

deployment "Copy last two versions copy new" = "copyAdditionalFilesTo_Execute"(
    AdditionalFiles : @"$(SessionWorkFolder)\ProductBuild",
    TargetFolder: @"C:\installNewVersion");

deployment "UpdateFirefox" = "browserUpdate_Execute"(
    Browser: "Firefox",
    Version: "64.0.2.1");

deployment "UpdateChrome" = "browserUpdate_Execute"(
    Browser: "Chrome",
    Version: "71.0.3578.802");

deployment "Upgrade product no backdoor for only kashell manipulation with reboot agent" = "[App11InstallProduct] Install 2017 no backdoor", "Upgrade product for only kashell manipulation impl", "RebootAgent";

deployment "Upgrade product for only kashell manipulation with reboot agent" = "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "Upgrade product for only kashell manipulation impl", "RebootAgent";

deployment "Upgrade product in deployment for only kashell manipulation with reboot agent" = "Install 2017 with fw Impl", "Upgrade product for only kashell manipulation impl", "RebootAgent";

deployment "Upgrade product no backdoor for only kashell manipulation" = "[App1_InstallProduct] Install 2017 w EicarCreator tool Impl", "Upgrade product for only kashell manipulation impl";

deployment "Upgrade product with Backdoor No App Ver for only kashell manipulation" = "Install 2017 with fw Impl", "Upgrade product for only kashell manipulation impl";

select deployment "Install product for only kashell manipulation [s]" (Name)
{
    | "App8"   => "Install product for only kashell manipulation App8"
    | "App7"    => "Install product for only kashell manipulation"
    | "App11"    => "Install product for only kashell manipulation"
    | "App2"    => "Install product for only kashell manipulation"
    | "App10"   => "Install product for only kashell manipulation"
    | "App10FS" => "Install product for only kashell manipulation"
    | "App6"   => "Install product for only kashell manipulation"
}

deployment "Install product for only kashell manipulation App8" = "_Install product"(
    ForceDisableAppVerifier: true,
    DisableTestModulesInstallation: true,
    ActivateEmbeddedTrial: false,
    InstallLicenceBackdoor: "Off",
    SetProductNameForFacade: false);

deployment "Install product for only kashell manipulation" = "_Install product"(
    ForceDisableAppVerifier: true,
    DisableTestModulesInstallation: true,
    ActivateEmbeddedTrial: true,
    InstallLicenceBackdoor: "Off",
    SetProductNameForFacade: false);

deployment "Upgrade product for only kashell manipulation impl" = "_Install product"(
    DisableTestModulesInstallation: true,
    SetProductNameForFacade: false);

deployment "Copy Comodo and set autorun" = "Copy Comodo"(SetAutorun: true);
