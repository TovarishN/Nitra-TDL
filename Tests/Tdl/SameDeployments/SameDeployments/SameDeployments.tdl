suite "Kfa.BvtPvt.Dumps" : SessionParameters
{
    platform all_pc;
    product KFA;
    ExcludeMasks = "*.iso,*.vhd,*_full.exe";
    DistribFiles = DistribFiles;
    DistribTestModules = DistribTestModules;
    BvtPvt-Dumps-scenarios();
}

scenario BvtPvt-Dumps-scenarios = WhenOnlyOneDumpFileNotTooOldThenDumpListShouldContainOneFile, CheckSendingDumpWithRunningConfigurationServerWithoutConfig;

scenario WhenOnlyOneDumpFileNotTooOldThenDumpListShouldContainOneFile
{
    deployment "Install product Custom DumpWriter error reporting mode";
    environments (all_pc_and_servers, KFA);
    method Autotest.Kis.Suites.Dump.WithoutSendingDumpTest.WhenOnlyOneDumpFileNotTooOldThenDumpListShouldContainOneFile;
    UniqueId = "c64cc0a9-d6cd-42d1-a838-2a0aecc98c2a";
    Timeout = "00:30:00";
    Area = "Dump";
    TfsId = 182944;
    NeedUnsignedAgent = false;
    RevertAgentAfter = true;
}

scenario CheckSendingDumpWithRunningConfigurationServerWithoutConfig
{
    deployment "Install product Custom DumpWriter error reporting mode";
    environments (all_pc_and_servers, KFA);
    method Autotest.Kis.Suites.Dump.SendingDumpOnNonExistentConfigurationServerTest.CheckSendingDumpWithRunningConfigurationServerWithoutConfig;
    UniqueId = "a0a416ce-a86e-430b-b8d1-1ebd23de3703";
    Timeout = "00:30:00";
    Area = "Dump";
    TfsId = 182944;
    NeedUnsignedAgent = false;
    RevertAgentAfter = true;
}

suite type SessionParameters
{
    string DistribFiles;
    string DistribTestModules;
    string AutotestsBinariesPath;
    string ExcludeMasks;
    string BaseDistribFiles;
    string BaseDistribTestModules;
}

platform all_pc_and_servers =
    all_pc,
    all_servers;

platform all_pc =
    win_7,
    win_811,
    win_10;
platform all_servers =
    sbs2011,
    win2008r2,
    win2012r2,
    win-2019,
    xs-14393;
platform sbs2011;
platform win2008r2;
platform win2012r2;
platform win-2019;
platform xs-14393;

platform win_7;
platform win_811;
platform win_10;

product type Kavkis
{
    string Name;
    string BranchName;
    string Version;
    string AutotestBinariesExcludedFilesMasks;
    string ProductBinariesExcludedFilesMasks;
    string ConfigFilesFamily;
    string TestAppPackName;
    string DumpServerProduct;
}

external
{
  string ProductVersion;
  string DistribFiles;
  string DistribTestModules;
  string AutotestsBinariesPath;
  string ProductBasesPath;
  string BaseDistribFiles;
  string BaseDistribTestModules;
  string UpdateSource;
  string BasesVersion;
  string LocalTestBinariesFolder= @"C:\\AutotestBinaries";
  string DeployerExePath = @"C:\\AutotestBinaries\Autotests.Deployer.exe";
}

product KFA : Kavkis
{
    Name = "KFA";
    BranchName = "Main";
    Version = ProductVersion;
    AutotestBinariesExcludedFilesMasks = "ksm*.Product.Config;ksde*.Product.Config";
    ProductBinariesExcludedFilesMasks = "*_full.exe;*_reduced.exe";
    ConfigFilesFamily = "Kis.";
    TestAppPackName = "KasperskyLab.Kis.UI.TestApp.zip";
    DumpServerProduct = "KAV.21.0.0.0";
}


deployment "Install product Custom DumpWriter error reporting mode" = 
    "Base Product selector",
    "_Install product Custom DumpWriter error reporting mode",
    "Reboot selector";

select deployment "Base Product selector"(InstallationType)
{
    | _ => "Skip base product installation"
    | "Upgrade" => "_Install Base Product"
}

deployment "Skip base product installation" = "Null Deploy";

deployment "Null Deploy"()
{
    expected 0;
}

deployment "_Install Base Product" = 
    "Install base product Core",
    "start Product Service";

deployment "Install base product Core" = "Install product Core" (
    ProductBinariesPath:  @"{SessionWorkFolder}\BaseProductBuild",
    TurnOffDumpOnAssert: true);

deployment "Install product Core" = 
    "Prepare WER dumps and gerate metadata rules",
    "Download Product distributive selector MainProduct",
    "Disable compatibility telemetry",
    "Prepare files for installation",
    "InstallProduct",
    "Dump Deployment Context";

deployment "Prepare WER dumps and gerate metadata rules"(
    string ApplicationNameMsiExec = @"msiexec.exe",
    string ApplicationNameKashell = @"kashell.exe",
    string DeployerPath = DeployerExePath )
{

    expected 42;
}

select deployment "Download Product distributive selector MainProduct"(MainProduct)
{
    | _ => "Download Product distributive"
    | "KIS" => "Download Product distributive for KIS"
    | "KAV" => "Download Product distributive for KIS"
    | "KFA" => "Download Product distributive for KIS"
    | "SAAS" => "Download Product distributive for KIS"
}

deployment "Download Product distributive"(
    string DistribFolder = @"C:\install",
    string ProductBinariesExcludedFilesMasks,
    string ProductBinariesIncludedFilesMasks = @"",
    string ProductTraceRootOverridenLocation = @"C:\Agent\Artifacts",
    string UploadDumpsToDumpServerSwitch = "Enable",
    string UploadDumpsToTestDropSwitch = "Disable",
    string ProductBinariesToken = @"", // obsolete?
    string ProductBinariesPath = @"{SessionWorkFolder}\ProductBuild",
    string CertsPath = @"C:\install",
    string DeployerPath = DeployerExePath )
{

    expected 42;
}

deployment "Download Product distributive for KIS" = "Download Product distributive"(
    ProductBinariesExcludedFilesMasks: "*_full.exe;*_reduced.exe");

deployment "Disable compatibility telemetry"(
    string DeployerPath = DeployerExePath )
{
    expected 42;
}

deployment "Prepare files for installation"(
    string SetupRegFilePath = @"C:\install\setup.reg",
    string DistribFolder = @"C:\install",
    string SetupRegActions = @"",
    int    TraceFileMaxLevel = 700,
    string RootCertificatesFolder = @"",
    string UpdateTarget = "0",
    string DumpWriterErrorReportingMode = @"",
    string SkipRemoteConnectionCheckMask = @"*Agent*",
    string SuggestSafeKidsSwitch = "Disable",
    string ProductTraceRootOverridenLocation = @"C:\Agent\Artifacts",
    bool   UseProxyForUpdate = false,
    string UpdateSource = "",
    bool   RunAtSystemStartup = false,
    bool   InstallKisActivationBackdoor = false,
    bool   DisableAutomaticKfaDowngrade = true,
    bool   ForcePreloadDumpWriter = false,
    bool   TurnOffDumpOnAssert = false,
    bool   DisableSetProductNameForFacade = false,
    bool   DisableTour = true,
    string GuiStartupDelay = @"",
    string TracingFilterMask = @"",
    string SetupXmlFilePath = @"C:\install\setup.xml",
    bool   EnableSslDecoding = false,
    string ProtectionSwitch = @"Default",
    string AntiSpamSwitch = @"Default",
    string DontUseProxy = @"Default",
    string SettingsXmlFilePath = @"C:\install\settings.xml",
    string FeatureFlags = @"",
    string UseGdprSwitch = "Default",
    string InstallKsdeBundleSwitch = "Disable",
    string KpcRegion = "",
    string RequestedSaasTier = "",
    string KpcOneTimeSecret = "",
    string KpcUserId = "",
    string KpcKasperskyId = "",
    string KpcActivationCode = "",
    string DriversLogState = "",
    string MsiFileNameOverride = @"",
    bool   EnableSelfDefense = false,
    bool   AllowServiceStop = true,
    string DeployerPath = DeployerExePath )
{
    expected 42;
}

deployment "InstallProduct"(
    string DistribFolder = @"C:\install",
    string AcceptEulaSwitch = "Enable",
    string AcceptKsnAgreementSwitch = "Enable",
    string AcceptMarketingAgreementSwitch = "Enable",
    string AcceptSocializationAgreementSwitch = "Enable",
    bool   DisableSkipProductCheck = false,
    bool SkipRecommendedSettings = true,
    bool   EnableSelfDefense = false,
    bool   DisablePpl = false,
    bool   DebugMode = false,
    string LocalizationCode = @"",
    string TestArtefactsFolder = @"{SessionWorkFolder}\Artefacts",
    string ActivationCode = @"",
    string DeployerPath = DeployerExePath )
{
    expected 42;
}

deployment "Dump Deployment Context"(
    string DumpDeploymentActions = @"CurrentDistributivePath, ScreenshotsFolder, TestArtefactsFolder",
    string DistribFolder = @"C:\install",
    string ScreenshotsFolder = @"{SessionWorkFolder}\Screenshots",
    string TestArtefactsFolder = @"{SessionWorkFolder}\Artefacts",
    string DeployerPath = DeployerExePath )
{
     expected 42;
}

deployment "start Product Service"(
    bool   EnableProductStart = true,
    string DistribFolder = @"C:\install",
    string DeployerPath = DeployerExePath )
{
    expected 42;
}

deployment "_Install product Custom DumpWriter error reporting mode" = "Install product Full Core"(
    DumpWriterErrorReportingMode: "FileOnDisk");

select deployment "Install product Full Core"(MainProduct)
{
    | _ => "_Install product Full Core"
    | "KIS" => "Install product Full Core for KIS"
    | "KAV" => "Install product Full Core for KIS"
    | "KFA" => "Install product Full Core for KIS"
    | "SAAS" => "Install product Full Core for KIS"
}

deployment "Install product Full Core for KIS" = "_Install product Full Core"(
    ProductBinariesExcludedFilesMasks: "*_full.exe;*_reduced.exe",
    ConfigFilesFamily: "Kis.");


deployment "_Install product Full Core" = 
    "Prepare WER dumps and gerate metadata rules",
    //"Download Product distributive selector MainProduct",
    "Download Product distributive",
    "Disable compatibility telemetry",
    "Prepare files for installation",
    "InstallProduct",
    //"Deploy test modules and modify product setings selector MainProduct",
    "Deploy test modules and modify product setings",
    "Disable welcome tour",
    "Dump Deployment Context",
    "Install License Backdoor",
    "Install MockPlatform",

    //from Switch to KSN mock:
    "Switch to KSN mock (default off)";


select deployment "Reboot selector"(InstallationType)
{
    | _ => "Skip reboot"
    | "Upgrade" => "RebootAgent"
}

select deployment "RebootAgent"(NeedStartStopProduct)
{
    | _ => Reboot
    | "true" => RebootWithStartStopProduct
    | "before" => StartStopProductWithReboot
}

deployment Reboot = reboot "00:15:00";
deployment RebootWithStartStopProduct = Reboot, StartStopProduct;
deployment StartStopProductWithReboot = StartStopProduct, Reboot;

deployment "Deploy test modules and modify product setings"(
    string DistribFolder = @"C:\install",
    string AiConfigFolder = @"C:\install",
    string UseProxy = @"",
    bool   EnableBssTraces = false, 
    string ProductTraceRootOverridenLocation = @"C:\Agent\Artifacts",
    string ConfigFilesFamily,
    bool   DisableInstallKashell = false,
    bool   DisableInstallKpmTestMediator = false,
    bool   DisableInstallPlatformFacade = false,
    bool   DisableInstallRemotingFacade = false,
    bool   DisableInstallChangeTool = false,
    bool   InstallKsnController = false,
    bool   InstallTestTransportProvider = false,
    bool   SkipHttpClientFactoryInstallation = false,
    string DeployerPath = DeployerExePath )
{
    expected 42;
}

deployment "Disable welcome tour"(
    bool   DisableTour = true,
    string DistribFolder = @"C:\install",
    string InstallKsdeBundleSwitch = "Disable",
    string DeployerPath = DeployerExePath )
{
     expected 42;
}

deployment "Install License Backdoor"(
    string DistribFolder = @"C:\install",
    string DeployerPath = DeployerExePath )
{
    expected 42;
}

deployment "Install MockPlatform"(
    string DistribFolder = @"C:\install",
    string MockPlatformPath = @"C:\KL.MockPlatform",
    string DeployerPath = DeployerExePath )
{
    expected 42;
}

deployment "Switch to KSN mock (default off)"(
    string DistribFolder = @"C:\install",
    string AiConfigFolder = @"C:\install",
    bool   SwitchToKsnMock = false,
    string KsnMockArchiveFolder = @"C:\install",
    string DeployerPath = DeployerExePath )
{
    expected 42;
}

deployment "Skip reboot" = "Null Deploy";

deployment StartStopProduct(
    string DistribFolder = @"C:\install", 
    string DeployerPath = DeployerExePath,
    bool EnableProductStart = true,
    bool EnableProductStop = true)
{
    expected 42;
}
