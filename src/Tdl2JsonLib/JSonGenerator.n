using DotNet;

using JSonDal;

using Microsoft.Cci.MetadataReader.ObjectModelImplementation;

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Utility.Pair;

using Newtonsoft.Json;

using Nitra;
using Nitra.BackEnd.Cci;
using Nitra.Declarations;
using Nitra.ProjectSystem;

using Microsoft.Cci;

using QuickType;

using System;
using System.Text;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;

using Tdl;
using Tdl2JsonLib.ExceptionHelper;

// Сгенерированно с помощью: https://app.quicktype.io/
namespace Tdl2JsonLib
{
  public delegate TransfomationFunc(rootNs : NamespaceSymbol, output : string) : List[CompilerMessage];

  public module JsonGenerator
  {
    static _jsonVersion = 5;
    static _maxErrorsOrWarningsToDisplay = 30;
    public event OnMessage : Action[string];
    
    public Generate([NotNullOrEmpty] workingDirectory : string, [NotNull] sourceFiles : array[string], [NotNull] references : array[string],
      isMethodTypingEnabled : bool, output : Lazy[TextWriter], transformatorOutput : string, transformatorOpt : TransfomationFunc) : void
    {
      def absolutePaths = sourceFiles.Select(f => if(Path.IsPathRooted(f)) f else Path.Combine(workingDirectory, f)).ToArray();

      def CheckFilesExists(files, messageformatter : string -> string)
      {
        def notFoundFiles = files.Where(f => !File.Exists(f)).ToList();
        when (notFoundFiles.Any())
        {
          def messages = notFoundFiles.Select(messageformatter).ToArray();
          throw ConfigurationException(string.Join("\r\n", messages));
        }
      }

      CheckFilesExists(absolutePaths, m => $"File not found: $m");

      def rootNamespace = Compile(workingDirectory, absolutePaths, references, isMethodTypingEnabled);
      if (transformatorOpt != null)
      {
        def messages = transformatorOpt(rootNamespace, transformatorOutput);
        ProcessCompilerMessages(messages);
      }
      else
        GenerateJson(rootNamespace, output);
    }

    private Compile(directory : string, files : array[string], refs : array[string], isMethodTypingEnabled : bool) : NamespaceSymbol
    {
      TdlTypingSettings.IsMethodTypingEnabled = isMethodTypingEnabled;

      def solution = FsSolution();
      def project  = FsProject(solution, 
                               directory, 
                               files.Map(FsFileWithId(_, TdlLang.Instance)),
                               [FullNameLibReference("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")  : LibReference,
                                 FullNameLibReference("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"),
                                 FullNameLibReference("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
                                 .Concat(refs.Select(r => FileLibReference(r) : LibReference)).ToArray());

      def stopwatch      = Stopwatch.StartNew();

      def projectSupport = ProjectSupport();
      ReportMessage("Loading types from referenced assemblies...");
      def data           = projectSupport.RefreshReferences(CancellationToken.None, project);
      ReportElapsedTime(stopwatch);

      ReportMessage("Parsing TDLs...");
      project.Data       = data;
      def files          = project.Files.Select(_.GetEvalPropertiesData()).ToImmutableArray();
      ReportElapsedTime(stopwatch);

      ReportMessage("Semantic analysis...");
      projectSupport.RefreshProject(CancellationToken.None, files, data);
      ReportElapsedTime(stopwatch);

      def messages = HashSet();

      foreach (msg in project.CompilerMessages :> CompilerMessageList)
        _ = messages.Add(msg);

      foreach (file when file.HasCompilerMessage in files)
      foreach (msg  in file.GetCompilerMessage())
        _ = messages.Add(msg);

      foreach (file in project.Files)
      foreach (msg  in file.GetCompilerMessages())
        _ = messages.Add(msg);

      ProcessCompilerMessages(messages);

      def (_, _, namespaceSymbol) = data :> IDotNetBackEnd * DependentPropertyEvalContext * NamespaceSymbol;
      namespaceSymbol
    }

    internal ReportMessage(msg : string) : void
    {
      OnMessage?.Invoke(msg);
    }

    private ReportElapsedTime(stopwatch : Stopwatch) : void
    {
      ReportMessage($"Elapsed time: $(stopwatch.Elapsed)");
      stopwatch.Restart();
    }

    private ProcessCompilerMessages(messages : IEnumerable[CompilerMessage]) : void
    {
      def texts = List();
      
      mutable errorCount;
      mutable warningCount;
      mutable skipHints;
      foreach (message in messages)
      {
        match (message.Type)
        {
          | FatalError | Error =>
            when (errorCount == _maxErrorsOrWarningsToDisplay)
            {
              texts.Add($"Too many errors detected! Only first $(errorCount) shown.");
              break;
            }
            errorCount++;
            skipHints = false;

          | Warning =>
            when (warningCount == _maxErrorsOrWarningsToDisplay)
              texts.Add($"Too many warnings detected! Only first $(warningCount) shown.");
            warningCount++;
            when (warningCount > _maxErrorsOrWarningsToDisplay)
            {
              skipHints = true;
              continue;
            }

          | Hint =>
            when (skipHints)
              continue;
        }

        texts.Add(message.ToString());
      }

      when (texts.Count > 0)
        throw CompilerErrorException(string.Join(Environment.NewLine, texts), messages)
    }

    private GenerateJson(root : NamespaceSymbol, output : Lazy[TextWriter]) : void
    {
      def stopwatch = Stopwatch.StartNew();
      JsonGenerator.ReportMessage("Generating JSON...");

      def symbols = root.MemberTable.Symbols.SelectMany(x => x).ToImmutableArray();
      def coordinate = Root() <-
      {
        Version       = _jsonVersion;
        Schema        = $"http://auto-reports.avp.ru/starter-schema/v$_jsonVersion/dev/schema.json";
        Deployments   = Deployments.Generate(symbols);
        Products      = symbols.OfType.[ProductSymbol     ]().Select(GenerateProduct) .ToDictionary();
        Platforms     = symbols.OfType.[PlatformSymbol    ]().Select(GeneratePlatform).ToDictionary();
        Suites        = symbols.OfType.[SuiteSymbol       ]().Select(GenerateSuite)   .ToDictionary();
        TestScenarios = symbols.OfType.[Tdl.ScenarioSymbol]().SelectMany(GenerateScenarios).ToDictionary();
      };

      def settings = ConverterSettings.Settings <- Formatting = Formatting.Indented;
      def serializer = JsonSerializer.Create(settings);
      serializer.Serialize(output.Value, coordinate);
      output.Value.Flush();

      ReportElapsedTime(stopwatch);
    }

    private GeneratePlatform(platformSymbol : PlatformSymbol) : string * PlatformValue
    {
      | Platform.DefSymbol as Def => (Def.Name, PlatformValue() <- { Platform    = Platform() })
      | Platform.SetSymbol as Set => (Set.Name, PlatformValue() <- { StringArray = Set.Platforms.Select(_.Name).ToArray(); });
      | _                         => ThrowNotSupportedSymbol(platformSymbol)
    }

    private CollectDefs(defs : Seq[Def]) : Seq[string * object]
    {
      foreach(@def in defs)
      {
        def name = @def.Symbol.Name;
        match(@def.Expr)
        {
          | Tdl.Expr.String as str => yield (name, str.Value)
          | Tdl.Expr.False         => yield (name, false)
          | Tdl.Expr.True          => yield (name, true)
          | Real            as x   => yield (name, x.Value)
          | Integerl        as x   => yield (name, x.Value)
          | Reference       as x   => yield (name, "#(" + x.Name + ")")
          | Error           as e   => throw NotSupportedException("Error at: " + e.Location);
          | x                      => throw NotSupportedException("The '" + x + "' is not supported");
        }
      }
    }

    private GenerateProduct(productSymbol : ProductSymbol) : string * ProductValue
    {
      | Product.DefSymbol as Def => 
        def parameters = CollectDefs(Def.Defs).ToDictionary();
        def useAsFixedParameter(name : string) : string
        {
          mutable value;
          if (parameters.TryGetValue(name, out value))
          {
            _ = parameters.Remove(name);
            value :> string
          }
          else
            null
        }
        (Def.Name, 
          ProductValue() <- 
          {
            Product = Product() <- { 
              Name        = useAsFixedParameter("Name");
              ReleaseName = useAsFixedParameter("ReleaseName");
              Version     = useAsFixedParameter("Version");
              Parameters  = parameters;
            }
          })
      | Product.SetSymbol as Set => (Set.Name, ProductValue() <- { StringArray = Set.AllProducts.Select(p => p.Name).ToArray(); })   
      | _ => ThrowNotSupportedSymbol(productSymbol)
    }

    private GetAssemblyAndMethodName(method : Member.MethodSymbol) : string * string
    {
      def decl         = method.GetDeclarationsOfType.[ExternalMethodDeclaration]();
      def method       = decl.First().Method;
      def type         = method.ContainingType :> ITypeDefinition;
      def unit         = TypeHelper.GetDefiningUnit(type);
      def assemblyName = unit.Name.Value + ".dll";
      def methodName   = method.ContainingType + "." + method.Name.Value;

      (assemblyName, methodName)
    }

    private SubstituteVariables(froms : ImmutableArray[Code.From], index : int = 0) : Seq[Dictionary[TypedSymbol, DeclarationSymbol]]
    {
      if (index < froms.Length)
      {
        def from = froms[index];
        foreach (dictionary in SubstituteVariables(froms, index + 1))
        {
          foreach (values in from.Elems)
          {
            foreach (var in from.Vars with i)
              dictionary[var] = values[i];

            yield dictionary
          }
        }
      }
      else
        yield Dictionary()
    }
    
    TryResolveVar[T](dic : Dictionary[TypedSymbol, DeclarationSymbol], varOrSymbol : TypedSymbol) :  T
      where T: DeclarationSymbol
    {
      mutable result;
      if (dic.TryGetValue(varOrSymbol, out result))
        result :> T
      else
        varOrSymbol :> T
    }
    
    private GenerateScenarios(scenarioSymbol : ScenarioSymbol) : Seq[string * TestCase]
    {
      mutable counter : uint = 0;
      match(scenarioSymbol)
      {
            | Tdl.Scenario.GeneratorSymbol as g =>
              def getString(name : string) : string
              {
                g.Defs.Find(d => d.Symbol.Name == name).Map(_.Expr).Map(expr => (expr :> Tdl.Expr.String).Value).WithDefault(null);
              }
              def getBool(name : string) : bool?
              {
                g.Defs.Find(d => d.Symbol.Name == name).Map(_.Expr)
                  .Map(fun(expr)
                    {
                      | Tdl.Expr.True  => Nullable(true)
                      | Tdl.Expr.False => Nullable(false)
                      | _              => throw NotSupportedException()
                    })
                  .WithDefault(null);
              }
              def getLong(name : string) : long?
              {
                  g.Defs.Find(d => d.Symbol.Name == name).Map(_.Expr).Map(expr => Nullable((expr :> Tdl.Expr.Integerl).Value)).WithDefault(null);
              }
              def incGuid(guid : Guid) : Guid
              {
                def bytes1   = guid.ToByteArray();
                def version  = BitConverter.ToUInt32(bytes1, 0) + counter;
                def bytes2   = BitConverter.GetBytes(version);
                bytes1[0] = bytes2[0];
                bytes1[1] = bytes2[1];
                bytes1[2] = bytes2[2];
                bytes1[3] = bytes2[3];
                Guid(bytes1)
              }
              mutable uniqueId = Guid.Parse(getString("UniqueId"));
              def names = List();
              foreach (dic in SubstituteVariables(g.Froms, 0))
              {
                counter++;
                def deployment = TryResolveVar(dic, g.Deployment) : DeploymentSymbol;
                def method     = TryResolveVar(dic, g.Method)     : Member.MethodSymbol;
                def platform   = TryResolveVar(dic, g.Platform)   : PlatformSymbol;
                def product    = TryResolveVar(dic, g.Product)    : ProductSymbol;
                def getTestMethod() : TestMethod
                {
                  def (assemblyName, methodName) = GetAssemblyAndMethodName(method);
                  TestMethodQualifier() <- 
                  {
                    AssemblyName = assemblyName;
                    MethodName   = methodName;
                  }
                }
                def name = scenarioSymbol.Name + "-" + counter;
                
                names.Add(name);
                
                def testGroup =
                  TestGroup() <- 
                  {
                    Deployments             = array[TestGroupDeployment() <- String = deployment.Name];
                    Environments            = array[EnvironmentElement() <- { Platforms= array[platform.Name]; Products=array[product.Name]; }];
                    TestMethod              = getTestMethod();
                    Area                    = getString("Area");
                    NeedUnsignedAgent       = getBool  ("NeedUnsignedAgent");
                    RequireInternet         = getBool  ("RequireInternet");
                    RerunCountOnTestFailure = getLong  ("RerunCountOnTestFailure");
                    RerunCountOnTestSuccess = getLong  ("RerunCountOnTestSuccess");
                    Responsible             = getString("Responsible");
                    RevertAgentAfter        = getBool  ("RevertAgentAfter");
                    RevertAgentBefore       = getBool  ("RevertAgentBefore");
                    TfsId                   = getLong  ("TfsId");
                    Timeout                 = getString("Timeout");
                    UniqueId                = uniqueId.ToString();
                    ProductGroupName        = getString("ProductGroupName");
                  };

                yield (name, TestCase() <- { TestGroup = testGroup; });
                uniqueId = incGuid(uniqueId);
              }
              
              yield (scenarioSymbol.Name, TestCase() <- { TestGroup = TestGroup() <- { TestScenarios = names.ToArray() }; });

        | _ => yield GenerateScenario(scenarioSymbol);
      }
    }
    
    private GenerateScenario(scenarioSymbol : ScenarioSymbol) : string * TestCase
    {
      (scenarioSymbol.Name, 
        TestCase() <- {
          TestGroup = 
          match(scenarioSymbol)
          {
            | Tdl.Scenario.DefSymbol as r =>
              def parallelSetOpt = if (r.IsParallelSetOptEvaluated) r.ParallelSetOpt else null;
              def barriersCount  = if (parallelSetOpt == null) Dictionary() 
                                   else parallelSetOpt.BarriersCount.ToDictionary();
              def getString(name : string) : string
              {
                r.Defs.Find(d => d.Symbol.Name == name).Map(_.Expr).Map(expr => (expr :> Tdl.Expr.String).Value).WithDefault(null);
              }
              def getBool(name : string) : bool?
              {
                r.Defs.Find(d => d.Symbol.Name == name).Map(_.Expr)
                  .Map(fun(expr)
                    {
                      | Tdl.Expr.True  => Nullable(true)
                      | Tdl.Expr.False => Nullable(false)
                      | _              => throw NotSupportedException()
                    })
                  .WithDefault(null);
              }
              def getLong(name : string) : long?
              {
                  r.Defs.Find(d => d.Symbol.Name == name).Map(_.Expr).Map(expr => Nullable((expr :> Tdl.Expr.Integerl).Value)).WithDefault(null);
              }
              def getTestMethod() : TestMethod
              {
                def allowRebootOpt = getBool("AllowReboot");
                when (allowRebootOpt == null && r.Actions.Length == 1)
                when (r.Actions[0] is ScenarioAction.Method as method)
                {
                  def (assemblyName, methodName) = GetAssemblyAndMethodName(method.method);
                  return TestMethodQualifier() <- 
                  {
                    AssemblyName = assemblyName;
                    MethodName   = methodName;
                  };
                }
                def makeMethodAction(method : ScenarioAction.Method) : TestMethodQualifier
                {
                  def (assemblyName, methodName) = GetAssemblyAndMethodName(method.method);
                  TestMethodQualifier() <- { AssemblyName = assemblyName; MethodName = methodName; }
                }
                def makeAction(action : ScenarioAction) : TestSequenceItem
                {
                  | Reboot             => RebootTestStep() <- { ForceReboot = ForceReboot() }
                  | Method        as m => makeMethodAction(m)
                  | WaitForReboot as x =>                   
                    WaitForRebootTestStep() <- 
                    {
                      WaitForReboot = 
                        WaitForReboot() <-
                        {
                          RebootTimeout = if (string.IsNullOrEmpty(x.TimeSpan)) "00:05:00" else x.TimeSpan
                        };
                    }
                  | Barrier as barrier =>
                    def b = barrier.barrier;
                    WaitForBarrierTestStep() <-
                    {
                      WaitForBarrier = 
                        WaitForBarrier() <- 
                        {
                          Id      = b.Guid;
                          Timeout = TimeSpan.Parse(b.Timeout.Value);
                          Count   = barriersCount[b];
                        }
                    }
                  | _ => assert(false, "Unsupported ScenarioAction: " + action)
                }
                
                if (r.Actions.Length == 1)
                  match (r.Actions[0])
                  {
                    | Config as c => TestBot() <- { TestConfigName = c.path.Value; ArtifactsCollectionTimeout = c.ArtifactsCollectionTimeout; }
                    | Method as m => makeMethodAction(m)
                    | a => assert(false, "Unsupported ScenarioAction: " + a)
                  }
                else
                  TestMethodSequence() <-
                  {
                    TestSequence = r.Actions.Select(makeAction).ToArray();
                    AllowReboot  = allowRebootOpt;
                  }
              }
              
              TestGroup() <- 
              {
                  Deployments             = array[TestGroupDeployment() <- String = r.Deployment.Name];
                  Environments            = r.Environments.MapToArray(env => EnvironmentElement() <- { Platforms= array[env.Platform.Name]; Products=array[env.Product.Name]; });
                  TestMethod              = getTestMethod();
                  Area                    = getString("Area");
                  NeedUnsignedAgent       = getBool  ("NeedUnsignedAgent");
                  RequireInternet         = getBool  ("RequireInternet");
                  RerunCountOnTestFailure = getLong  ("RerunCountOnTestFailure");
                  RerunCountOnTestSuccess = getLong  ("RerunCountOnTestSuccess");
                  Responsible             = getString("Responsible");
                  RevertAgentAfter        = getBool  ("RevertAgentAfter");
                  RevertAgentBefore       = getBool  ("RevertAgentBefore");
                  TfsId                   = getLong  ("TfsId");
                  Timeout                 = getString("Timeout");
                  UniqueId                = getString("UniqueId");
                  MultiMachineId          = if (parallelSetOpt == null) null else parallelSetOpt.MultiMachineId;
              }

            | Tdl.Scenario.SetSymbol as Set => TestGroup() <- { TestScenarios = Set.Scenarios.Select(_.Name).ToArray() }
            | _                             => ThrowNotSupportedSymbol(scenarioSymbol)
          }
      })
    }

    private GenerateSuite(suiteSymbol : SuiteSymbol) : string * TestSuite
    {
      def parameters = CollectDefs(suiteSymbol.Defs).ToDictionary();
      def suite = TestSuite() <- 
      {
        Platforms     = array[suiteSymbol.Platform.Name];
        Products      = array[suiteSymbol.Product.Name];
        TestScenarios = suiteSymbol.Statements.OfType.[Tdl.SuiteStatement.CallScenario]().Select(s => s.Reference.Name).ToArray();
        Parameters    = parameters;
      };

      (suiteSymbol.Name, suite)
    }
  } // module
} // namespace