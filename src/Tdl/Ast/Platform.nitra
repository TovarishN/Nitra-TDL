using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  abstract declaration Platform : NamespaceMember, TypedDeclaration
  {
    symbol
    {
      Type = context.ToTdlContext().PlatformType;
    }

    | ignore-case Def
      {
        symbol
        {
          Kind           = "platform";
          SpanClass      = TdlLang.PlatformSpanClass;
          IsSameIdentity = candidate is Tdl.Platform;
        }
      }
    | ignore-case Set
      {
        symbol
        {
        stage 1:
          in PlatformsRefs : ImmutableArray[Ref[PlatformSymbol]]; // TODO: Убрать из символа!
        stage 2:
          in Platforms : ImmutableArray[PlatformSymbol];

          Kind           = "platform";
          SpanClass      = TdlLang.PlatformSpanClass;
          IsSameIdentity = candidate is Tdl.Platform;
          MakeHint       = TdlUtils.PlatformMakeHint(symbolCache, this);
        }

        Symbol.PlatformsRefs = TdlUtils.Resolve(Platforms.Ref);
        Symbol.Platforms     = TdlUtils.ToSymbol(Symbol, Symbol.PlatformsRefs);

        Platforms.Scope      = Scope;

        Platforms : Reference*;
      }
  }
}
