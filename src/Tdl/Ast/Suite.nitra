using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  declaration Suite : NamespaceMember
  {
    symbol
    {
      in Defs        : ImmutableArray[Def];
      in Platform    : PlatformSymbol;
      in Product     : ProductSymbol;
      in Statements  : ImmutableArray[SuiteStatement];
      in Type        : SuiteTypeSymbol;
      in DefaultDefs : ImmutableArray[FormalParameterSymbol]; // Parameters of select deployments which not set explicitly.

      Kind           = "suite";
      SpanClass      = TdlLang.SuiteSpanClass;
      IsSameIdentity = candidate is Tdl.Suite;
    }

    out PlatformRef : Ref[PlatformSymbol];
    out ProductRef  : Ref[ProductSymbol];
    out TypeRef     : Ref[DeclarationSymbol];

    Platform.Scope              = Scope;
    PlatformRef                 = Platform.Ref.Resolve();
    Symbol.Platform             = PlatformRef.Symbol;

    Product.Scope               = Scope;
    ProductRef                  = Product.Ref.Resolve();
    Symbol.Product              = ProductRef.Symbol;

    Statements.Scope            = Scope;
    Statements.ScopeIn          = EmptyScope.Instance;
    Symbol.Statements           = Statements.Statement;

    Definitions.DefinitionScope = TdlUtils.MakeParameterScope(Statements.ScopeOut.UnionWith(Symbol.Type.Scope));
    Definitions.Scope           = ProjectSupport.ExternalSymbolTable;
    Symbol.Defs                 = TdlUtils.MakeDefinitions(Definitions, context, Definitions.SymbolRef);

    TypeOpt.Scope               = Scope;
    TypeRef                     = TypeOpt.Ref.GetValueOrDefault();
    Symbol.Type                 = context.ResolveSuiteTypeSymbol(TypeRef);
    Symbol.DefaultDefs          = Name.MakeDefaultDefs(context, Symbol.Defs, Definitions.DefinitionScope);

    TypeOpt     : Reference?;
    Platform    : Reference;
    Product     : Reference;
    Definitions : Definition*;
    Statements  : SuiteStatementAst*;
  }
}
