using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  abstract declaration Suite : NamespaceMember, TypedDeclaration
  {
    | ignore-case Def
      {
        symbol
        {
          in Platform    : PlatformSymbol;
          in Product     : ProductSymbol;
          in Statements  : ImmutableArray[SuiteStatement];
          in EntityOpt   : ValueOption[EntitySymbol];
        stage 3:
          in DefaultDefs : ImmutableArray[FormalParameterSymbol]; // Parameters of select deployments which not set explicitly.
          in Defs        : ImmutableArray[Def];

          Kind           = "suite";
          SpanClass      = TdlLang.SuiteSpanClass;
          IsSameIdentity = candidate is Tdl.Suite;
        }

        out PlatformRef  : Ref[PlatformSymbol];
        out ProductRef   : Ref[ProductSymbol];
        out TypeRef      : Ref[DeclarationSymbol];
        out EntityRefOpt : ValueOption[Ref[EntitySymbol]];

        Platform.Scope              = Scope;
        PlatformRef                 = Platform.Ref.Resolve();
        Symbol.Platform             = PlatformRef.Symbol;

        Product.Scope               = Scope;
        ProductRef                  = Product.Ref.Resolve();
        Symbol.Product              = ProductRef.Symbol;

        Statements.Scope            = Scope;
        Statements.ScopeIn          = EmptyScope.Instance;
        Symbol.Statements           = Statements.Statement;

        Definitions.DefinitionScope = TdlUtils.MakeParameterScope(Statements.ScopeOut.UnionWith(Symbol.Type.Scope));
        Definitions.Scope           = context.GetExternalSymbolTable().UnionWith(ContainingTable);
        Symbol.Defs                 = TdlUtils.MakeDefinitions(Definitions, context, Symbol.Type, Definitions.SymbolRef);

        TypeOpt.Scope               = Scope;
        TypeRef                     = TypeOpt.Ref.GetValueOrDefault();
        Symbol.Type                 = context.ResolveSuiteTypeSymbol(TypeRef);
        Symbol.DefaultDefs          = await Name.MakeDefaultDefs(context, Symbol.Defs, Definitions.DefinitionScope, Symbol.Product);

        EntityOpt.Scope             = Scope;
        EntityRefOpt                = EntityOpt.Ref.ResolveOpt();
        Symbol.EntityOpt            = EntityRefOpt.GetSymbolOpt();

        SetUsed(Symbol.Statements);
        ValidateParameters(context, Symbol.Defs, Symbol.Statements, Symbol.Product.Type.Scope);

        EntityOpt   : Reference?;
        TypeOpt     : Reference?;
        Platform    : Reference;
        Product     : Reference;
        Definitions : Definition*;
        Statements  : SuiteStatementAst*;
      }

    | ignore-case List
      {
        symbol
        {
        stage 2:
          in AllSuites : ImmutableArray[SuiteSymbol]; // Defs + Generators
        stage 1:
          in Suites    : ImmutableArray[SuiteSymbol];

          Kind           = "suites";
          SpanClass      = TdlLang.SuiteSpanClass;
          IsSameIdentity = candidate is Suite.List;
        }
        stage 1:
          in SuitesRefs : ImmutableArray[Ref[SuiteSymbol]];

        SuitesRefs       = TdlUtils.Resolve(Suites.Ref);
        Symbol.Suites    = TdlUtils.ToSymbol(SuitesRefs);
        Symbol.AllSuites = TdlUtils.Flatten(Symbol.Suites);

        Suites.Scope  = Scope;

        CheckForRecursionSuite(context, Symbol, Symbol.AllSuites);

        Suites : Reference*;
      }
    | ignore-case Generator : Container
      {
        symbol
        {
          in Statements  : ImmutableArray[SuiteStatement];
          in Platform    : TypedDeclarationSymbol;
          in Product     : TypedDeclarationSymbol;
          in EntityOpt   : ValueOption[TypedDeclarationSymbol];
        stage 3          :
          in DefaultDefs : ImmutableArray[FormalParameterSymbol]; // Parameters of select deployments which not set explicitly.
          in Defs        : ImmutableArray[Def];
          in Froms       : ImmutableArray[Code.From];

          Scope          = MemberTable;
          Kind           = "scenario generator";
          IsSameIdentity = candidate is Tdl.Scenario;
          SpanClass      = TdlLang.ScenarioSpanClass;
        }
      stage 1:
        out PlatformRef  : Ref[TypedDeclarationSymbol];
        out ProductRef   : Ref[TypedDeclarationSymbol];
        out TypeRef      : Ref[DeclarationSymbol];
        out EntityRefOpt : ValueOption[Ref[TypedDeclarationSymbol]];

        Froms.Scope                 = Scope;
        Froms.ContainingTable       = Symbol.MemberTable;
        Symbol.Froms                = await TdlUtils.MakeFroms(Froms);

        Statements.Scope            = Scope;
        Statements.ScopeIn          = EmptyScope.Instance;
        Symbol.Statements           = Statements.Statement;

        Platform.Scope              = Scope.HideWith(Symbol.MemberTable);
        PlatformRef                 = Platform.Ref.Resolve();
        Symbol.Platform             = PlatformRef.Symbol;

        Product.Scope               = Platform.Scope;
        ProductRef                  = Product.Ref.Resolve();
        Symbol.Product              = ProductRef.Symbol;

        Definitions.DefinitionScope = TdlUtils.MakeParameterScope(Statements.ScopeOut.UnionWith(Symbol.Type.Scope));
        Definitions.Scope           = context.GetExternalSymbolTable().UnionWith(ContainingTable).HideWith(Symbol.MemberTable);
        Symbol.Defs                 = TdlUtils.MakeDefinitions(Definitions, context, Symbol.Type, Definitions.SymbolRef);

        TypeOpt.Scope               = Scope;
        TypeRef                     = TypeOpt.Ref.GetValueOrDefault();
        Symbol.Type                 = context.ResolveSuiteTypeSymbol(TypeRef);
        Symbol.DefaultDefs          = await Name.MakeDefaultDefs(context, Symbol.Defs, Definitions.DefinitionScope, Symbol.Product, Symbol.Froms);

        EntityOpt.Scope             = Platform.Scope;
        EntityRefOpt                = EntityOpt.Ref.ResolveOpt();
        Symbol.EntityOpt            = EntityRefOpt.GetSymbolOpt();

        Platform.  CheckExpected(context, context.GetPlatformTypeSymbol(), PlatformRef.Symbol.Type);
        Product.   CheckExpected(context, context.GetProductTypeSymbol(),  ProductRef.Symbol.Type);
        SetUsed(Symbol.Statements);
        ValidateParameters(context, Symbol.Defs, Symbol.Statements, Symbol.Product.Type.Scope);

        Froms        : From*;
        EntityOpt    : Reference?;
        TypeOpt      : Reference?;
        Platform     : Reference;
        Product      : Reference;
        Definitions  : Definition*;
        Statements   : SuiteStatementAst*;
      }
  }
}
