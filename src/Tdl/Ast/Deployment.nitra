using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  abstract declaration Deployment : NamespaceMember, TypedDeclaration, UsedDeclaration
  {
    symbol
    {
      Type = context.ToTdlContext().DeploymentType;

    stage 2:
      in AggregateParametersScope : Scope;
      in AllDeployments : ImmutableArray[DeploymentSymbol];
    }

    Symbol.AllDeployments = TdlUtils.CheckForRecursionDeployment(Name, context, Symbol, Symbol.AggregateParametersScope);

    InitialKeyword : NSpan;

    unless (InitialKeyword.IsEmpty)
      SetInitialDeployment(Symbol, context);

    when (!Symbol.IsUsed && !(context.Project is Nitra.ProjectSystem.FsProject[IAst]))
      Name.Warning(context, "Unused deployment.");

    | ignore-case Empty
      {
        symbol
        {
          AggregateParametersScope = EmptyScope.Instance;
          AllDeployments           = ImmutableArray.Empty;
        }
      }

    | ignore-case Script : Parameterizable, DeploymentOptionsHost
      {
        symbol
        {
          in Path      : ParsedValue[string];
          in EmbedPath : ParsedValue[string];
          in Extension : ParsedValue[string];
          in Base64    : ParsedValue[array[byte]];

        stage 3:
          in Defs            : ImmutableArray[UntypedDef];

          Kind           = "deployment";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
          MakeHint       = TdlUtils.DeploymentMakeHint(symbolCache, this);
        }

        Content.Symbol                  = Symbol;
        Symbol.AggregateParametersScope = Symbol.ParameterScope;
        Definitions.Scope               = Symbol.ParameterScope;
        Symbol.Defs                     = TdlUtils.MakeUntypedDefinitions(Definitions);
        Parameters.Scope                = Scope;

        Content         : DeploymentScriptContent;
        Definitions     : Definition*;
      }
    | ignore-case Code : Parameterizable, DeploymentOptionsHost
      {
        symbol
        {
          table Variables;

          Kind           = "deployment";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
          MakeHint       = TdlUtils.DeploymentMakeHint(symbolCache, this);
        }

        Parameters.Scope                = Scope;
        Commands.StepNumberIn           = 0;
        Commands.Variables              = Symbol.Variables;
        Commands.OuterScope             = Scope;
        Commands.LocalScope             = Symbol.ParameterScope.UnionWith(Symbol.Variables);
        Symbol.AggregateParametersScope = Symbol.ParameterScope;

        Commands : CommandCall*;
      }
    | ignore-case Set
      {
        symbol
        {
        stage 1:
          in Deployments : ImmutableArray[DeploymentSymbol];

          Kind           = "deployment set";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
        }

        Symbol.AggregateParametersScope = await TdlUtils.MakeAggregateParametersScope(Symbol.Deployments);
        Symbol.Deployments              = TdlUtils.MakeDeployments(Deployments.Ref);

        Deployments.Scope               = Scope;
        Deployments.ContainingTable     = ContainingTable;

        SetUsed(Symbol.Deployments, true);

        Deployments : DeploymentExpr*;
      }

    | ignore-case Currying
      {
        symbol
        {
          in BaseDeployment  : DeploymentSymbol;
          in ExcludedParams  : ImmutableArray[FormalParameterSymbol];
          in ParameterValues : ImmutableArray[Def];

          Kind           = "deployment";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
        }

        out BaseDeploymentRef : Ref[DeploymentSymbol];

        BaseDeployment.Scope             = Scope;
        BaseDeploymentRef                = BaseDeployment.Ref.Resolve();
        Symbol.BaseDeployment            = BaseDeploymentRef.Symbol;

        CurredParameters.Scope           = Scope;
        CurredParameters.DefinitionScope = TdlUtils.MakeParameterScope(BaseDeploymentRef.Symbol.AggregateParametersScope);
        Symbol.ExcludedParams            = TdlUtils.MakeExcludedParams(CurredParameters.SymbolRef);
        Symbol.AggregateParametersScope  = TdlUtils.MakeCurryingScope(CurredParameters.DefinitionScope, Symbol.ExcludedParams);

        Symbol.ParameterValues           = TdlUtils.MakeDefinitions(CurredParameters, context, CurredParameters.SymbolRef);
        Symbol.BaseDeployment.IsUsed     = true;

        BaseDeployment   : Reference;
        CurredParameters : Definition*;
      }
    | ignore-case Select : Parameterizable
      {
        symbol
        {
          in Deployments : ImmutableArray[DeploymentSymbol];
          in Cases       : ImmutableArray[ImmutableArray[string]];

          Kind           = "select deployment";
          SpanClass      = TdlLang.DeploymentSpanClass;
          IsSameIdentity = candidate is Tdl.Deployment;
        }

        Symbol.Deployments              = TdlUtils.MakeDeployments(TdlUtils.ResolveDeployments(Cases.Refs));
        Symbol.AggregateParametersScope = await TdlUtils.MakeSelectAggregateParametersScope(Symbol.ParameterScope, Symbol.Deployments);
        Parameters.Scope                = Scope;
        Cases.Scope                     = TdlUtils.MakeDeploymentScope(Scope);
        Symbol.Cases                    = Cases.Cases;

        ChechSelectDeployment(context, Cases);
        SetUsed(Symbol.Deployments, true);

        Cases      : Case*;
      }
  } // Deployment
}
