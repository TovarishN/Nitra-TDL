using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System.Collections.Immutable;

namespace Tdl
{
  abstract declaration Deployment : NamespaceMember, Typed
  {
    symbol
    {
      Type = context.ToTdlContext().DeploymentType;

    stage 2:
      in AggregateParametersScope : Scope;
    }

    | Script : Parameterizable
      {
        symbol
        {
          in Path      : ParsedValue[string];
          in Expected  : ParsedValue[int];
          in ForReboot : ParsedValue[int];
          in Timeout   : ParsedValue[string];
          in Defs      : ImmutableArray[Def2];

          Kind      = "deployment";
          SpanClass = TdlLang.DeploymentSpanClass;
        }


        Parameters.DeclaredIn           = Symbol;
        Symbol.AggregateParametersScope = Symbol.ParameterScope;
        Definitions.Scope               = Symbol.ParameterScope;
        Symbol.Path                     = TdlUtils.ConvertStringLiteral(Path);
        Symbol.Expected                 = TdlUtils.MakeExpected(Success);
        Symbol.ForReboot                = TdlUtils.MakeForReboot(ForReboot);
        Symbol.Timeout                  = TdlUtils.MakeTimeout(Timeout);
        Symbol.Defs                     = TdlUtils.MakeDefinitions(Definitions);
        Parameters.Scope                = Scope;

        Path        : CSharp.StringLiteral;
        Definitions : Definition*;
        Options     : DeploymentOption*;

        decompose Options
        {
          Success   : DeploymentOption.Success?;
          ForReboot : DeploymentOption.ForReboot?;
          Timeout   : DeploymentOption.Timeout?;
        }
      }
    | Set
      {
        symbol
        {
        stage 1:
          in Deployments : ImmutableArray[DeploymentSymbol];

          Kind      = "deployment set";
          SpanClass = TdlLang.DeploymentSpanClass;
        }

        Symbol.AggregateParametersScope = await TdlUtils.MakeAggregateParametersScope(Symbol.Deployments);
        Symbol.Deployments              = TdlUtils.MakeDeployments(Deployments.Ref);

        Deployments.Scope               = Scope;
        Deployments.ContainingTable     = ContainingTable;

        Deployments : DeploymentExpr*;
      }

    | Currying
      {
        symbol
        {
          in BaseDeployment  : DeploymentSymbol;
          in ExcludedParams  : ImmutableArray[FormalParameterSymbol];
          in ParameterValues : ImmutableArray[Def];

          Kind      = "deployment";
          SpanClass = TdlLang.DeploymentSpanClass;
        }

        out BaseDeploymentRef : Ref[DeploymentSymbol];

        BaseDeployment.Scope  = Scope;
        BaseDeploymentRef     = BaseDeployment.Ref.Resolve();
        Symbol.BaseDeployment = BaseDeploymentRef.Symbol;

        CurredParameters.Scope           = Scope;
        CurredParameters.DefinitionScope = BaseDeploymentRef.Symbol.AggregateParametersScope;
        Symbol.ExcludedParams            = TdlUtils.MakeExcludedParams(CurredParameters.SymbolRef);
        Symbol.AggregateParametersScope  = TdlUtils.MakeCurryingScope(CurredParameters.DefinitionScope, Symbol.ExcludedParams);

        Symbol.ParameterValues           = TdlUtils.MakeDefinitions(CurredParameters, context, CurredParameters.SymbolRef);

        when (Symbol.BaseDeployment is Deployment.SetSymbol)
          BaseDeployment.Error(context, "The deployment group is not allowed source for base deployment.");

        BaseDeployment   : Reference;
        CurredParameters : Definition*;

      }
    | Select : Parameterizable
      {
        symbol
        {
          in Deployments : ImmutableArray[DeploymentSymbol];
          in Cases       : ImmutableArray[ImmutableArray[string]];

          Kind      = "select deployment";
          SpanClass = TdlLang.DeploymentSpanClass;
        }

        Parameters.DeclaredIn           = Symbol;
        Symbol.Deployments              = TdlUtils.MakeDeployments(TdlUtils.ResolveDeployments(Cases.Refs));
        Symbol.AggregateParametersScope = await TdlUtils.MakeSelectAggregateParametersScope(Symbol.ParameterScope, Symbol.Deployments);
        Parameters.Scope                = Scope;
        Cases.Scope                     = TdlUtils.MakeDeploymentScope(Scope);
        Symbol.Cases                    = Cases.Cases;

        ChechSelectDeployment(context, Cases);

        Cases      : Case*;
      }
  } // Deployment
}
