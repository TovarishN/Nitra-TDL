using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System;
using System.Collections.Immutable;
using System.Linq;

namespace Tdl
{
  abstract ast Action : BindableAst
  {
  stage 2:
    out ScenarioActions : ScenarioAction;

    | Method
      {
      stage 1:
        out MethodRef : Ref[Member.MethodSymbol];
        in Fake : Ref[Member.MethodSymbol];

        Method.NameScopeFactory = context.GetMethodScopeFactory();
        Method.Scope            = Scope;
        //MethodRef               = Method.Ref.Resolve();
        MethodRef = Fake;
        ScenarioActions         = ScenarioAction.Method(Method.Location, Method.Result, MaxRebootsCountOpt.Result, BinariesFolderOpt.Result,
                                                        ContinueOnErrorOpt);
        //ScenarioActions         = await TdlUtils.MakeMethodAction(Method, MethodRef.Symbol, MaxRebootsCountOpt.Result,
        //                            BinariesFolderOpt.Result, ContinueOnErrorOpt.Result);

        Method             : DefExpr;
        //Method             : QualifiedReference;
        MaxRebootsCountOpt : DefExpr?; // int
        BinariesFolderOpt  : DefExpr?; // string
        ContinueOnErrorOpt : ParsedValue[bool];

        when (!(Method is DefExpr.MemberAccess))
          Method.Error(context, "Invalid method reference. Only qualified method references supported, e.g.: MyType.MyMethod.");
      }
    | Script
      {
        ScenarioActions = ScenarioAction.Script(Name.Location, Name.Result, Arguments.Result,
          TdlUtils.MakeDefinitions(context, Definitions, Definitions.SymbolRef), MaxRebootsCountOpt.Result);

        Name               : DefExpr;
        Arguments          : DefExpr*;
        Definitions        : Definition*;
        MaxRebootsCountOpt : DefExpr?;
      }

    | Config
      {
        ScenarioActions = ScenarioAction.Config(Path.Location, Path.Result, MaxRebootsCountOpt.Result);

        MaxRebootsCountOpt : DefExpr?;
        Path               : DefExpr;
      }

    | GTest
      {
        ScenarioActions = ScenarioAction.GTest(Name.Location, Name.Result, Arguments.Result, MaxRebootsCountOpt.Result);

        Name               : DefExpr;
        Arguments          : DefExpr*;
        MaxRebootsCountOpt : DefExpr?;
      }

    | XCode
      {
        ScenarioActions = ScenarioAction.XCode(Container.Location, Container.Result, XcodePath.Result, MaxRebootsCountOpt.Result);

        Container          : DefExpr;
        XcodePath          : DefExpr;
        MaxRebootsCountOpt : DefExpr?;
      }

    | Apk
      {
        ScenarioActions = ScenarioAction.Apk(Name.Location, Name.Result, FilterOpt.Result, RunnerPath.Result, MaxRebootsCountOpt.Result);

        Name               : DefExpr;
        FilterOpt          : DefExpr?;
        RunnerPath         : DefExpr;
        MaxRebootsCountOpt : DefExpr?;
      }

    | Marathon
      {
        ScenarioActions = ScenarioAction.Marathon(TestContainerApk.Location, TestContainerApk.Result, AppApk.Result, RunnerPath.Result,
          Filter.Result, BinariesFolder.Result, MaxRebootsCountOpt.Result);

        TestContainerApk   : DefExpr;
        AppApk             : DefExpr;
        RunnerPath         : DefExpr;
        Filter             : DefExpr;
        BinariesFolder     : DefExpr;
        MaxRebootsCountOpt : DefExpr?;
      }

    | Login
      {
        ScenarioActions = ScenarioAction.Login(this.Location, User.Result, Password.Result);

        User               : DefExpr;
        Password           : DefExpr;
      }

    | Logoff          { ScenarioActions = ScenarioAction.Logoff(this.Location); }
    | LockWorkstation { ScenarioActions = ScenarioAction.LockWorkstation(this.Location); }
    | Reboot        { ScenarioActions = ScenarioAction.Reboot(this.Location); }
    | WaitForReboot
      {
        ScenarioActions = ScenarioAction.WaitForReboot(this.Location, TimeSpan.Value);

        TimeSpan : ParsedValue[string];
      }
    | Barrier
      {
        out BarrierRef : Ref[BarrierSymbol] = Reference.Ref.Resolve();

        Reference.Scope = Scope;
        ScenarioActions = ScenarioAction.Barrier(Reference.Location, BarrierRef.Symbol);

        Reference : Reference;
      }
  }
}
