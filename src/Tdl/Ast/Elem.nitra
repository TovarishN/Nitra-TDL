using DotNet;
using DotNet.AstUtils;

using Nitra;
using Nitra.Declarations;

using System;
using System.Collections.Immutable;

namespace Tdl
{
  abstract ast Elem : BindableAst
  {
  stage 1:
    in  ExpectedType : TypeSymbol;
    out Type         : TypeSymbol;
    out Symbols      : ImmutableArray[DeclarationSymbol];


    | Simple
      {
      stage 1:
        out TypedRef : Ref[TypedDeclarationSymbol];

        Reference.Scope = Scope;
        TypedRef        = Reference.Ref.Resolve();
        Type            = TypedRef.Symbol.Type;
        Symbols         = ImmutableArray.Create(TypedRef.Symbol);
        
        CheckExpected(context, ExpectedType, Type);

        Reference : QualifiedReference;
      }

    | Tuple
      {
        Items.Scope = Scope;
        Type        = await context.MakeTupleType(Items.Ref);
        Symbols     = context.MakeTuple(Items.Ref);

        CheckExpectedForTuple(context, Items, ExpectedType, Type);

        Items : QualifiedReference*;
      }
  }
}
