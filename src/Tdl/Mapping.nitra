using DotNet;
using Nitra;
using Nitra.Declarations;
using System;

namespace Tdl
{
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Следующий код добавляет в шарповые идентификаторы поддержку идентификаторов в Lisp-стиле и "заковыченых"

  map syntax Grammar.Name.String    -> Declarations.Name = Nitra.Declarations.Name(this.Location, GetText(this.Body));
  map syntax Grammar.Name.ListStyle -> Declarations.Name = Nitra.Declarations.Name(this.Location, GetText(this.Body));

  map syntax Grammar.Name.String(_tag : CSharp.ImplicitNamespaceTag) -> ImplicitNamespace { this -> Name; }
  map syntax Grammar.Name.ListStyle(_tag : CSharp.ImplicitNamespaceTag) -> ImplicitNamespace { this -> Name; }

  map syntax Grammar.Reference.String    -> Declarations.Reference = Nitra.Declarations.Reference(this.Location, GetText(this.Body));
  map syntax Grammar.Reference.ListStyle -> Declarations.Reference = Nitra.Declarations.Reference(this.Location, GetText(this.Body));

  map syntax Grammar.Module -> Module
  {
    Name = Name(Location.FromStart(), Location.Source.File.FullName);
    MemberDeclarations -> Members;
  }

  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  map syntax Grammar.MemberDeclaration -> NamespaceMember
  {
    | Open             -> UsingOpenDirective  {               QualifiedIdentifier -> NamespaceOrTypeName; }
    | Alias            -> UsingAliasDirective { Name -> Name; QualifiedIdentifier -> NamespaceOrTypeName; }
    | Platform         -> Platform.Def        { Name -> Name; }
    | PlatformSet      -> Platform.Set        { Name -> Name; Platforms.Item1 -> Platforms; }
    | DeploymentScript -> Deployment.Script
      {
        Name                                 -> Name;
        DeploymentScriptContent              -> Content;
        Parameters.FormalParameters.Item1    -> Parameters;
        DeploymentScriptBody.DefDeclarations -> Definitions;
        DeploymentScriptBody.Options         -> Options;
      }
    | DeploymentCode   -> Deployment.Code
      {
        Name                                 -> Name;
        Parameters.FormalParameters.Item1    -> Parameters;
        DeploymentCodeBody.Commands          -> Commands;
        DeploymentCodeBody.Options           -> Options;
      }
    | DeploymentSet    -> Deployment.Set      { Name -> Name; Deployments.Item1 -> Deployments; }
    | Currying         -> Deployment.Currying { Name -> Name; Reference -> BaseDeployment; ParameterCurryings.Item1 -> CurredParameters; }
    | DeploymentSelect -> Deployment.Select   { Name -> Name; Parameters.Item1 -> Parameters; Cases -> Cases; }
    | ProductType      -> ProductType         { Name -> Name; TypeBody.Fields -> Fields; }
    | Product          -> Product.Def         { Name -> Name; Type -> ProductType; ProductBody.DefDeclarations -> Definitions; }
    | ProductSet       -> Product.Set         { Name -> Name; Type -> ProductType; Products.Item1 -> Products; }
    | Scenario         -> Scenario.Def
      {
        Name                                    -> Name;
        match (ParametersOpt)
        {
          | Some(x) -> x.FormalParameters.Item1
          | None()  -> []
        } -> Parameters;
        ScenarioBody.Deployment.Reference       -> Deployment;
        ScenarioBody.Action                     -> Actions;
        ScenarioBody.Environments.Elems.Item1   -> Environments;
        ScenarioBody.DefDeclarations            -> Definitions;
        match (ScenarioBody.FilterOpt)
        {
          | Some(x) -> Some(x.Condition)
          | None()  -> None()
        } -> FilterOpt;
      }
    | ScenarioGenerator -> Scenario.Generator
      {
        Name                                      -> Name;
        Froms                                     -> Froms;
        SelectScenario.Deployment.Reference       -> Deployment;
        SelectScenario.Method.QualifiedIdentifier -> Method;
        SelectScenario.Platform                   -> Platform;
        SelectScenario.Product                    -> Product;
        SelectScenario.DefDeclarations            -> Definitions;
      }
    | ScenarioSet       -> Scenario.Set { Name -> Name; Scenarios.Item1 -> Scenarios; IsMultiMachine = ParsedValue(Span.StartPos);  }
    | ParallelScenario  -> Scenario.Set { Name -> Name; Scenarios.Item1 -> Scenarios; IsMultiMachine = ParsedValue(Parallel, true); }
    | SuiteType         -> SuiteType    { Name -> Name; TypeBody.Fields -> Fields; }
    | Suite             -> Suite.Def
      {
        Name                         -> Name;
        match (Name) { _ -> None() } -> TypeOpt;
        match (SuiteBody.EntityOpt)
        {
          | Some(x) -> Some(x.Reference)
          | None    -> None()
        }-> EntityOpt;
        SuiteBody.Platform.Reference -> Platform;
        SuiteBody.Product.Reference  -> Product;
        SuiteBody.DefDeclarations    -> Definitions;
        SuiteBody.SuiteStatements    -> Statements;
      }
    | SuiteList        -> Suite.List
      {
        Name         -> Name;
        Suites.Item1 -> Suites;
      }
    | SuiteGenerator   -> Suite.Generator
      {
        Name                         -> Name;
        Froms                        -> Froms;
        match (Name) { _ -> None() } -> TypeOpt;
        match (SuiteScenario.EntityOpt)
        {
          | Some(x) -> Some(x.Reference)
          | None    -> None()
        }-> EntityOpt;
        SuiteScenario.Platform.Reference -> Platform;
        SuiteScenario.Product.Reference  -> Product;
        SuiteScenario.DefDeclarations    -> Definitions;
        SuiteScenario.SuiteStatements    -> Statements;
      }
    | SuiteTyped       -> Suite.Def
      {
        Name                         -> Name;
        Some(Type)                   -> TypeOpt;
        match (SuiteBody.EntityOpt)
        {
          | Some(x) -> Some(x.Reference)
          | None    -> None()
        }-> EntityOpt;
        SuiteBody.Platform.Reference -> Platform;
        SuiteBody.Product.Reference  -> Product;
        SuiteBody.DefDeclarations    -> Definitions;
        SuiteBody.SuiteStatements    -> Statements;
      }
    | External -> ExternalAst { ExternalBody.Fields -> Fields; }
    | Barrier  -> Barrier     { Name -> Name; Timeout -> Timeout; }
    | Entity   -> Entity      { Name -> Name; EntityBody.DefDeclarations -> Definitions; }
  }

  map syntax Grammar.MemberDeclaration.DeploymentSelect.Parameter -> FormalParameter
  {
    Name         -> Name;
    Expr.Nop { } -> Default;
    []           -> Attributes;
    QualifiedReference.Simple { Name = Reference(Name.Location.FromEnd(), "string"); } -> Type;
    Modifier = ParsedValue(Name.Span.FromEnd(), ParameterModifier.None);
  }

  map syntax Grammar.DeploymentScriptContent -> DeploymentScriptContent
  {
    | FilePath   -> FilePath   { Path -> Path; }
    | Base64     -> Base64     { Data -> Data; Extension -> Extension; }
    | SourceCode -> SourceCode { Text -> Text; Extension -> Extension; }
  }

  map syntax Grammar.Case -> Case
  {
    Values.Item1 -> Values;
    Reference    -> Reference;
  }

  map syntax Grammar.Case.Value -> CaseValue
  {
    | String   -> String   { this.StringLiteral -> Value; }
    | Wildcard -> Wildcard { }
  }

  map syntax Grammar.From -> From
  {
    VarDecl    -> Vars;
    List.Item1 -> List;
  }
  
  map syntax Grammar.From.VarDecl -> Var*
  {
    | Name  -> [Var { Name -> Name; }]
    | Tuple -> this(Names.Item1)
  }

  //HACK: отсутствует оператор map! маппинг Tuple написан инлайновым кодом
  map syntax Grammar.From.VarDecl(_names : Name*) -> Var*
  {
    | Name -> this
  }

  map syntax Grammar.From.VarDecl.Tuple(names : Name*) -> Var* =
  {
    def items = array(names.Count);
    foreach (n in names with index)
      items[index] = Var(n.Location, n);
    Var.AstList(names.Location, items);
  };

  map syntax Grammar.From.VarRef -> Elem
  {
    | Ref   -> Elem.Simple { QualifiedIdentifier -> Reference; }
    | Tuple -> Elem.Tuple  { Refs.Item1          -> Items; }
  }

  map syntax Grammar.DeploymentExpr -> DeploymentExpr
  {
    | Reference -> DeploymentReference { Reference -> Reference; }
    | Reboot    ->
      let timeout : CSharp.StringLiteral = Timeout in
      DeploymentReboot
      {
          Name = Name(Location, "Reboot-" + TdlUtils.ConvertStringLiteral(timeout));
          timeout -> Timeout;
      }
  }

  map syntax Grammar.Action -> Action*
  {
    | Script   -> [ Action.Script
      {
        Script.Name      -> Name;
        Script.Arguments -> Arguments;
        match (Script.EnvironmentsOpt)
        {
          | None    -> []
          | Some(x) -> x.Defs.Item1
        } -> Definitions;
        MaxRebootsCountOpt = Script.MaxRebootsCountOpt.ToInt();
      } ]
    | Config   -> 
      [ Action.Config
        {
          Config.Path -> Path;
          MaxRebootsCountOpt = Config.MaxRebootsCountOpt.ToInt();
        }
      ]
    | GTest    -> [ Action.GTest
      {
        GTest.Name      -> Name;
        GTest.Arguments -> Arguments;
        MaxRebootsCountOpt = GTest.MaxRebootsCountOpt.ToInt();
      } ]
    | Apk      -> [ Action.Apk
      {
        Apk.Name      -> Name;
        match (Apk.FilterOpt)
        {
          | Some(x) -> Some(x.Value)
          | None()  -> None()
        } -> FilterOpt;
        Apk.RunnerPath -> RunnerPath;
        MaxRebootsCountOpt = Apk.MaxRebootsCountOpt.ToInt();
      } ]
    | Method   -> 
      [ Action.Method
        {
          Method.QualifiedIdentifier -> Method;
          MaxRebootsCountOpt = Method.MaxRebootsCountOpt.ToInt();
        }
      ]
    | Sequence -> SequenceActions
  }

  map syntax Grammar.SequenceAction -> Action
  {
    | Method  -> Method
      {
        Method.QualifiedIdentifier -> Method;
        MaxRebootsCountOpt = Method.MaxRebootsCountOpt.ToInt();
      }
    | Script ->  Action.Script
      {
        Script.Name -> Name;
        Script.Arguments -> Arguments;
        match (Script.EnvironmentsOpt)
        {
          | None -> []
          | Some(x) -> x.Defs.Item1
        } -> Definitions;
        MaxRebootsCountOpt = Script.MaxRebootsCountOpt.ToInt();
      }
    | Config -> Action.Config
        {
          Config.Path -> Path;
          MaxRebootsCountOpt = Config.MaxRebootsCountOpt.ToInt();
        }
    | GTest -> Action.GTest
      {
        GTest.Name      -> Name;
        GTest.Arguments -> Arguments;
        MaxRebootsCountOpt = GTest.MaxRebootsCountOpt.ToInt();
      }
    | Apk -> Action.Apk
      {
        Apk.Name      -> Name;
        match (Apk.FilterOpt)
        {
          | Some(x) -> Some(x.Value)
          | None()  -> None()
        } -> FilterOpt;
        Apk.RunnerPath -> RunnerPath;
        MaxRebootsCountOpt = Apk.MaxRebootsCountOpt.ToInt();
      }
    | Login           -> Login           { User -> User; Password -> Password; }
    | Logoff          -> Logoff          { }
    | LockWorkstation -> LockWorkstation { }
    | Reboot          -> Reboot          { }
    | WaitForReboot1  -> WaitForReboot   { TimeSpan -> TimeSpan; }
    | WaitForReboot2  -> WaitForReboot   { TimeSpan -> TimeSpan; }
    | Barrier         -> Barrier         { Reference -> Reference; }
  }

  map syntax Grammar.DeploymentOption -> DeploymentOption
  {
    | Success    -> Success   { Value -> Value; }
    | ForReboot1 -> ForReboot { Value -> Value; }
    | ForReboot2 -> ForReboot { Value -> Value; }
    | Timeout    -> Timeout   { Value -> Value; }
  }

  map syntax Grammar.DefDeclaration -> Definition
  {
    Reference -> Reference;
    DefExpr   -> Expr;
  }

  map syntax Grammar.DefEnv -> Definition
  {
    Reference -> Reference;
    DefExpr   -> Expr;
  }

  map syntax Grammar.ParameterCurrying -> Definition
  {
    Reference -> Reference;
    DefExpr   -> Expr;
  }

  map syntax Grammar.CommandCall -> CommandCall
  {
    Command         -> Command;
    Arguments.Item1 -> Arguments;
  }

  map syntax Grammar.CommandCallArgument -> CommandCallArgument
  {
    | Input -> CommmandCallInputArgument
      {
        ParameterName -> ParameterName;
        Value         -> Value;
      }

    | Output -> CommmandCallOutputArgument
      {
        VariableName  -> Name;
        ParameterName -> ParameterName;
      }
  }

  map syntax Grammar.DefExpr -> DefExpr
  {
    | StringLiteral             -> String                    { StringLiteral -> Value; }
    | True                      -> True                      {  }
    | False                     -> False                     {  }
    | Reference                 -> Reference                 { this.Reference -> ParameterName; }
    | MemberAccess              -> MemberAccess              { Expr-> Expr; Member -> Member; }
    | RealLiteral               = DefExpr.RealLiteral(Location.WithSpan(RealLiteral));
    | DecimalIntegerLiteral     = DefExpr.DecimalIntegerLiteral(Lit.Location);
    | HexadecimalIntegerLiteral = DefExpr.HexadecimalIntegerLiteral(Lit.Location);
  }

  map syntax Grammar.Field -> Field
  {
    Name    -> Name;
    AnyType -> Type;
  }

  map syntax Grammar.SuiteStatement -> SuiteStatementAst
  {
    | CallTest -> CallScenario { Scenario -> Scenario; }
  }


  map syntax Grammar.Environment -> EnvironmentAst
  {
    Platform -> Platform;
    Product  -> Product;
  }

  map syntax Grammar.StringLiteral -> CSharp.StringLiteral {}

  map syntax Grammar.StringLiteral.RegularStringLiteral -> CSharp.StringLiteral { Lit }

  map syntax Grammar.StringLiteral.VerbatimStringLiteral -> CSharp.StringLiteral { Lit }
}
