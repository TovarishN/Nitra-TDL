using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;
using Nitra.Declarations;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tdl
{
  public class ParameterComparer : IEqualityComparer[DeclarationSymbol]
  {
    public static Instance : this = ParameterComparer();
      
    public Equals(x : DeclarationSymbol, y : DeclarationSymbol) : bool
    {
      | (p1 is FormalParameterSymbol, p2 is FormalParameterSymbol) =>
        p1.Name == p2.Name && TypeUnifier.Instance.Unify(p1.Type, p2.Type)
        
      | (p1 is FieldSymbol, p2 is FormalParameterSymbol) =>
        p1.Name == p2.Name && TypeUnifier.Instance.Unify(p1.Type, p2.Type)
          
      | (p1 is FormalParameterSymbol, p2 is FieldSymbol) =>
        p1.Name == p2.Name && TypeUnifier.Instance.Unify(p1.Type, p2.Type)
          
      | _ => false
    }
      
    public GetHashCode(obj : DeclarationSymbol) : int
    {
      | x is FormalParameterSymbol when x.IsTypeEvaluated => 
        def result = x.Name.GetHashCode() ^ x.Type.GetHashCode();
        result
          
      | x is FieldSymbol when x.IsTypeEvaluated => 
        def result = x.Name.GetHashCode() ^ x.Type.GetHashCode();
        result
          
      | _ => obj.GetHashCode()
    }
  }
}
