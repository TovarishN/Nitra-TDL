using Nitra.Declarations;

using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tdl
{
  public class TdlTypeUnifier : DotNet.TypeUnifier
  {
    public new static InitInstance() : void
    {
      Instance = TdlTypeUnifier();
    }

    protected override UnifyUnwraped(typeSymbol1 : TypeSymbol, typeSymbol2 : TypeSymbol, updatedVariables : ref LightList[TypeVarSymbol]) : bool
    {
      match (typeSymbol1, typeSymbol2)
      {
        | (TdlType.TupleSymbol as f1, TdlType.TupleSymbol as f2) =>
          if (f1.IsArgsEvaluated && !f2.IsArgsEvaluated)
            f2.Args = f1.Args;
          else if (!f1.IsArgsEvaluated && f2.IsArgsEvaluated)
            f1.Args = f2.Args;
          else if (!f1.IsArgsEvaluated && !f2.IsArgsEvaluated)
          {
            //assert2(false, "FunctionTypeSymbol Unify failed!");
            //return false;
          }
          else unless (RequireAll(f1.Args, f2.Args, ref updatedVariables))
            return false;

          true
        | (_ is ProductTypeSymbol, _ is TdlType.ProductSymbol) => true
        | (_ is TdlType.ProductSymbol, _ is ProductTypeSymbol) => true
        | _ =>
          when (typeSymbol1 : object is ConstructedTypeSymbol(TypeInfo=ti1, Args=args1))
          when (ti1 : object is SupportsInheritanceTypeSymbol(IsBaseTypeSetEvaluated=true, BaseTypeSet=baseTypeSet))
          {
            when (baseTypeSet.AncestorTypes.Contains(typeSymbol2))
              return true;
            when (typeSymbol2 is TypeVarSymbol(IsBaseTypeConstraintEvaluated=true, BaseTypeConstraint=ConstructedTypeSymbol(TypeInfo=ti2, Args=args2)) as tv2)
            when (baseTypeSet.AncestorTypes.Contains(ti2))
            {
              unless(UnifyAll(args1, args2, ref updatedVariables))
              {
                return false;
              }
              unless (tv2.IsDerivedTypeConstraintEvaluated)
              {
                tv2.DerivedTypeConstraint = typeSymbol1;
              }
              return true;
            }
          }
          base.UnifyUnwraped(typeSymbol1, typeSymbol2, ref updatedVariables)
      }
    }

    public TryUnifyAll(ts1 : IList[TypeSymbol], ts2 : IList[TypeSymbol]) : bool
    {
      mutable updatedVariables;
      def result = UnifyAll(ts1, ts2, ref updatedVariables);
      ResetTypeVars(ref updatedVariables);
      result
    }
    
    protected override SubtypeUnifyUnwraped(subtype : TypeSymbol, supertype : TypeSymbol, updatedVariables : ref LightList[TypeVarSymbol]) : bool
    {
      match(subtype, supertype)
      {
        | (_ is ProductTypeSymbol, _ is TdlType.ProductSymbol) => true
        | (sub is TopConstructedTypeSymbol, super is TopConstructedTypeSymbol) =>
          SubtypeUnifyUnwraped(sub.TypeInfo, super.TypeInfo, ref updatedVariables)
          && UnifyAll(sub.Args, super.Args, ref updatedVariables)

        | (TypeVarSymbol(IsTypeEvaluated=false, IsDerivedTypeConstraintEvaluated=true) as sub, _) =>
          unless (SubtypeUnifyUnwraped(sub.DerivedTypeConstraint, supertype, ref updatedVariables))
            return false;

          if (sub.IsBaseTypeConstraintEvaluated)
            SubtypeUnifyUnwraped(supertype, sub.BaseTypeConstraint, ref updatedVariables)
          else
          {
            sub.BaseTypeConstraint = supertype;
            true
          }
          
        | _ when TryUnify(subtype, supertype) => UnifyUnwraped(subtype, supertype, ref updatedVariables)
        | _ => base.SubtypeUnifyUnwraped(subtype, supertype, ref updatedVariables)
      }
    }
  } // class
} // namespace
