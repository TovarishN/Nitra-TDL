using Nitra.Declarations;

using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tdl
{
  class TdlTypeUnifier : DotNet.TypeUnifier
  {
    public new static InitInstance() : void
    {
      Instance = TdlTypeUnifier();
    }

    protected override UnifyUnwraped(typeSymbol1 : TypeSymbol, typeSymbol2 : TypeSymbol, updatedVariables : ref LightList[TypeVarSymbol]) : bool
    {
      match (typeSymbol1, typeSymbol2)
      {
        | (TdlType.TupleSymbol as f1, TdlType.TupleSymbol as f2) =>
          if (f1.IsArgsEvaluated && !f2.IsArgsEvaluated)
            f2.Args = f1.Args;
          else if (!f1.IsArgsEvaluated && f2.IsArgsEvaluated)
            f1.Args = f2.Args;
          else if (!f1.IsArgsEvaluated && !f2.IsArgsEvaluated)
          {
            //assert2(false, "FunctionTypeSymbol Unify failed!");
            //return false;
          }
          else unless (RequireAll(f1.Args, f2.Args, ref updatedVariables))
            return false;

          true

        | _ => base.UnifyUnwraped(typeSymbol1, typeSymbol2, ref updatedVariables)
      }
    }
  } // class
} // namespace
