using CSharp;
using DotNet;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra.Declarations;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Tdl
{
  class TdlProjectEvalPropertiesHost : CSharpProjectEvalPropertiesHost
  {
    protected _dotnetRootNamespace : NamespaceSymbol;
    
    public this(files : ImmutableArray[FileEvalPropertiesData], dotnetRootNamespace : NamespaceSymbol, rootNamespace : NamespaceSymbol)
    {
      base(files, rootNamespace);
      _dotnetRootNamespace = dotnetRootNamespace;
    }

    protected override BeforeStage(context : DependentPropertyEvalContext, _passName : string) : void
    {
      match (context.Stage)
      {
        | 0 =>
          foreach (file in _files)
            when (file.Ast is Module as m)
            {
              m.ContainingTable = _dotnetRootNamespace.MemberTable;
              m.RootNamespace   = _dotnetRootNamespace;
            }

        | 1 =>
          foreach (file in _files)
            when (file.Ast is Module as m)
              m.Scope = _dotnetRootNamespace.Scope.HideWith(_rootNamespace.Scope);

        | _ => ()
      }
    }
  }
}
