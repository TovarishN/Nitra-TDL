namespace Tdl
{
  syntax module Grammar
  {
    using Nitra.Core;
    using CSharp.CsIdentifiers;
    using CSharp.Literals;
    using CSharp.TokenNames;
    using CSharp.TopDeclarations;
    using CSharp.Types;

    keyword regex ['A'..'Z', 'a'..'z', '_'..'_', '-'..'-']+ rule S;

    [StartRule]
    syntax Module = MemberDeclaration*;

    regex TdlIdentifierPartCharacters = CSharp.CsIdentifiers.IdentifierPartCharacters | '-';
    regex LispIdent                   = CSharp.CsIdentifiers.IdentifierStartCharacter TdlIdentifierPartCharacters*;

    extend token Name
    {
      | String = '\"' Body=(!NotAllowedRegularStringLiteralChar Any)+ '\"'
      | ListStyle = Body=LispIdent
    }

    extend token Reference
    {
      | String = '\"' Body=(!NotAllowedRegularStringLiteralChar Any)+ '\"'
      | ListStyle = Body=LispIdent
    }
    
    syntax StringLiteral
    {
      | RegularStringLiteral  = Lit=RegularStringLiteral
      | VerbatimStringLiteral = Lit=VerbatimStringLiteral
    }

    syntax MemberDeclaration
    {
      | Alias            = "using" sm Name sm "=" sm QualifiedIdentifier ";" nl;
      | Open             = "using" sm QualifiedIdentifier ";" nl;
      | Platform         = "platform" sm Name ";" nl;
      | PlatformSet      = "platform" sm Name sm "=" sm Platforms=(Reference; "," sm)+ ";" nl;
      | DeploymentScript = "deployment" sm Name outline_begin_before "(" (FormalParameter; ","sm)* ")" outline_end_before sm "script" ScriptPath=StringLiteral sm  nl DeploymentScriptBody;
      | DeploymentSet    = "deployment" sm Name sm "=" sm Deployments=(Reference; "," sm)+ ";" nl
      | Currying         = "deployment" sm Name sm "=" sm Reference "(" (ParameterCurrying; "," sm)+ ")" ";" nl
      | ProductType      = "product" sm "type" sm Name nl TypeBody;
      | Product          = "product"  sm Name sm ":" Type=Reference nl ProductBody;
      | ProductSet       = "product"  sm Name sm ":" Type=Reference sm "=" sm Products=(Reference; "," sm)+ ";" nl;
      | Scenario         = "scenario" sm Name sm ScenarioBody;
      | ScenarioSet      = "scenario" sm Name sm "=" sm Scenarios=(Reference; "," sm)+ ";" nl;
      | SuiteType        = "suite" sm "type" sm Name nl TypeBody;
      | Suite            = "suite"    sm Name nl SuiteBody;
      | SuiteTyped       = "suite"    sm Name sm ":" Type=Reference nl SuiteBody;
      | External         = "external" sm ExternalBody;
    }

    syntax ParameterCurrying = Reference ":" sm DefExpr;

    syntax SuiteBody = outline_begin_before "{" inl Platform Product DefDeclaration* SuiteStatement+ d "}" nl outline_end_before
    {
      syntax Platform = "platform" sm Reference ";" nl;
      syntax Product  = "product"  sm Reference ";" nl;
      syntax SuiteStatement
      {
        | CallTest = Scenario=Reference "(" ")" ";" nl;
      }
    }

    syntax ScenarioBody = outline_begin_before "{" inl Deployment Environments Action DefDeclaration* d "}" nl outline_end_before
    {
      syntax Deployment   = "deployment" sm Reference ";" nl;
      syntax Environments = "environments" sm Elems=(Environment; "," sm; ?)+ ";" nl;
      syntax Environment  = "(" Platform=Reference "," sm Product=Reference ")";
      syntax Method       = "method" sm QualifiedIdentifier ";" nl;
      syntax Action
      {
        | Method
        | Sequence = "sequence" sm  "{" inl SequenceAction* d "}" nl outline_end_before
      }
      regex TimeSpan = DecimalDigit DecimalDigit ":" DecimalDigit DecimalDigit ":" DecimalDigit DecimalDigit | "";
      syntax SequenceAction
      {
        | Method
        | Reboot = "reboot" ";"
        | WaitForReboot1 = "wait" sm  "for" sm  "reboot" TimeSpan ";"
        | WaitForReboot2 = "wait-for-reboot" sm TimeSpan ";"
      }
    }

    syntax ProductBody = outline_begin_before "{" inl DefDeclaration* d "}" nl outline_end_before;

    syntax TypeBody = outline_begin_before "{" inl Field* d "}" nl outline_end_before;

    syntax ExternalBody = outline_begin_before "{" inl Field* d "}" nl outline_end_before;

    syntax Field = AnyType sm Name ";" nl;
    
    syntax DeploymentScriptBody = outline_begin_before "{" inl DefDeclaration* Expected=Expected* d "}" nl outline_end_before;

    syntax Expected
    {
      | Success    = "expected"                      sm Value=DecimalIntegerLiteral ";" nl;
      | ForReboot1 = "expected" sm "for" sm "reboot" sm Value=DecimalIntegerLiteral ";" nl;
      | ForReboot2 = "expected-for-reboot"           sm Value=DecimalIntegerLiteral ";" nl;
    }

    syntax DefDeclaration = Reference sm "=" sm DefExpr ";" nl;

    syntax DefExpr
    {
      | StringLiteral
      | "true"
      | "false"
      | RealLiteral;
      | DecimalIntegerLiteral     = Lit=DecimalIntegerLiteral
      | HexadecimalIntegerLiteral = Lit=HexadecimalIntegerLiteral
      | Reference
      //| InterpolatedRegularStringLiteral  = Lit=InterpolatedRegularStringLiteral
      //| InterpolatedVerbatimStringLiteral = Lit=InterpolatedVerbatimStringLiteral
    }
  }
}
